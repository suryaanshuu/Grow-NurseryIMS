
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model customer
 * 
 */
export type customer = $Result.DefaultSelection<Prisma.$customerPayload>
/**
 * Model nurseplant
 * 
 */
export type nurseplant = $Result.DefaultSelection<Prisma.$nurseplantPayload>
/**
 * Model plant
 * 
 */
export type plant = $Result.DefaultSelection<Prisma.$plantPayload>
/**
 * Model pricing
 * 
 */
export type pricing = $Result.DefaultSelection<Prisma.$pricingPayload>
/**
 * Model seed
 * 
 */
export type seed = $Result.DefaultSelection<Prisma.$seedPayload>
/**
 * Model supplier
 * 
 */
export type supplier = $Result.DefaultSelection<Prisma.$supplierPayload>
/**
 * Model adminuser
 * 
 */
export type adminuser = $Result.DefaultSelection<Prisma.$adminuserPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Customers
 * const customers = await prisma.customer.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Customers
   * const customers = await prisma.customer.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.customer`: Exposes CRUD operations for the **customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.customerDelegate<ExtArgs>;

  /**
   * `prisma.nurseplant`: Exposes CRUD operations for the **nurseplant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Nurseplants
    * const nurseplants = await prisma.nurseplant.findMany()
    * ```
    */
  get nurseplant(): Prisma.nurseplantDelegate<ExtArgs>;

  /**
   * `prisma.plant`: Exposes CRUD operations for the **plant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Plants
    * const plants = await prisma.plant.findMany()
    * ```
    */
  get plant(): Prisma.plantDelegate<ExtArgs>;

  /**
   * `prisma.pricing`: Exposes CRUD operations for the **pricing** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pricings
    * const pricings = await prisma.pricing.findMany()
    * ```
    */
  get pricing(): Prisma.pricingDelegate<ExtArgs>;

  /**
   * `prisma.seed`: Exposes CRUD operations for the **seed** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seeds
    * const seeds = await prisma.seed.findMany()
    * ```
    */
  get seed(): Prisma.seedDelegate<ExtArgs>;

  /**
   * `prisma.supplier`: Exposes CRUD operations for the **supplier** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Suppliers
    * const suppliers = await prisma.supplier.findMany()
    * ```
    */
  get supplier(): Prisma.supplierDelegate<ExtArgs>;

  /**
   * `prisma.adminuser`: Exposes CRUD operations for the **adminuser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Adminusers
    * const adminusers = await prisma.adminuser.findMany()
    * ```
    */
  get adminuser(): Prisma.adminuserDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.18.0
   * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    customer: 'customer',
    nurseplant: 'nurseplant',
    plant: 'plant',
    pricing: 'pricing',
    seed: 'seed',
    supplier: 'supplier',
    adminuser: 'adminuser'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "customer" | "nurseplant" | "plant" | "pricing" | "seed" | "supplier" | "adminuser"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      customer: {
        payload: Prisma.$customerPayload<ExtArgs>
        fields: Prisma.customerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.customerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.customerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>
          }
          findFirst: {
            args: Prisma.customerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.customerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>
          }
          findMany: {
            args: Prisma.customerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>[]
          }
          create: {
            args: Prisma.customerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>
          }
          createMany: {
            args: Prisma.customerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.customerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>[]
          }
          delete: {
            args: Prisma.customerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>
          }
          update: {
            args: Prisma.customerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>
          }
          deleteMany: {
            args: Prisma.customerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.customerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.customerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.customerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.customerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      nurseplant: {
        payload: Prisma.$nurseplantPayload<ExtArgs>
        fields: Prisma.nurseplantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.nurseplantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nurseplantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.nurseplantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nurseplantPayload>
          }
          findFirst: {
            args: Prisma.nurseplantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nurseplantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.nurseplantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nurseplantPayload>
          }
          findMany: {
            args: Prisma.nurseplantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nurseplantPayload>[]
          }
          create: {
            args: Prisma.nurseplantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nurseplantPayload>
          }
          createMany: {
            args: Prisma.nurseplantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.nurseplantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nurseplantPayload>[]
          }
          delete: {
            args: Prisma.nurseplantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nurseplantPayload>
          }
          update: {
            args: Prisma.nurseplantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nurseplantPayload>
          }
          deleteMany: {
            args: Prisma.nurseplantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.nurseplantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.nurseplantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nurseplantPayload>
          }
          aggregate: {
            args: Prisma.NurseplantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNurseplant>
          }
          groupBy: {
            args: Prisma.nurseplantGroupByArgs<ExtArgs>
            result: $Utils.Optional<NurseplantGroupByOutputType>[]
          }
          count: {
            args: Prisma.nurseplantCountArgs<ExtArgs>
            result: $Utils.Optional<NurseplantCountAggregateOutputType> | number
          }
        }
      }
      plant: {
        payload: Prisma.$plantPayload<ExtArgs>
        fields: Prisma.plantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.plantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$plantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.plantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$plantPayload>
          }
          findFirst: {
            args: Prisma.plantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$plantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.plantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$plantPayload>
          }
          findMany: {
            args: Prisma.plantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$plantPayload>[]
          }
          create: {
            args: Prisma.plantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$plantPayload>
          }
          createMany: {
            args: Prisma.plantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.plantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$plantPayload>[]
          }
          delete: {
            args: Prisma.plantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$plantPayload>
          }
          update: {
            args: Prisma.plantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$plantPayload>
          }
          deleteMany: {
            args: Prisma.plantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.plantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.plantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$plantPayload>
          }
          aggregate: {
            args: Prisma.PlantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlant>
          }
          groupBy: {
            args: Prisma.plantGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlantGroupByOutputType>[]
          }
          count: {
            args: Prisma.plantCountArgs<ExtArgs>
            result: $Utils.Optional<PlantCountAggregateOutputType> | number
          }
        }
      }
      pricing: {
        payload: Prisma.$pricingPayload<ExtArgs>
        fields: Prisma.pricingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.pricingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pricingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.pricingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pricingPayload>
          }
          findFirst: {
            args: Prisma.pricingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pricingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.pricingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pricingPayload>
          }
          findMany: {
            args: Prisma.pricingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pricingPayload>[]
          }
          create: {
            args: Prisma.pricingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pricingPayload>
          }
          createMany: {
            args: Prisma.pricingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.pricingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pricingPayload>[]
          }
          delete: {
            args: Prisma.pricingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pricingPayload>
          }
          update: {
            args: Prisma.pricingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pricingPayload>
          }
          deleteMany: {
            args: Prisma.pricingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.pricingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.pricingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pricingPayload>
          }
          aggregate: {
            args: Prisma.PricingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePricing>
          }
          groupBy: {
            args: Prisma.pricingGroupByArgs<ExtArgs>
            result: $Utils.Optional<PricingGroupByOutputType>[]
          }
          count: {
            args: Prisma.pricingCountArgs<ExtArgs>
            result: $Utils.Optional<PricingCountAggregateOutputType> | number
          }
        }
      }
      seed: {
        payload: Prisma.$seedPayload<ExtArgs>
        fields: Prisma.seedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.seedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.seedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seedPayload>
          }
          findFirst: {
            args: Prisma.seedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.seedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seedPayload>
          }
          findMany: {
            args: Prisma.seedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seedPayload>[]
          }
          create: {
            args: Prisma.seedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seedPayload>
          }
          createMany: {
            args: Prisma.seedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.seedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seedPayload>[]
          }
          delete: {
            args: Prisma.seedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seedPayload>
          }
          update: {
            args: Prisma.seedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seedPayload>
          }
          deleteMany: {
            args: Prisma.seedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.seedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.seedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$seedPayload>
          }
          aggregate: {
            args: Prisma.SeedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeed>
          }
          groupBy: {
            args: Prisma.seedGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeedGroupByOutputType>[]
          }
          count: {
            args: Prisma.seedCountArgs<ExtArgs>
            result: $Utils.Optional<SeedCountAggregateOutputType> | number
          }
        }
      }
      supplier: {
        payload: Prisma.$supplierPayload<ExtArgs>
        fields: Prisma.supplierFieldRefs
        operations: {
          findUnique: {
            args: Prisma.supplierFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$supplierPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.supplierFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$supplierPayload>
          }
          findFirst: {
            args: Prisma.supplierFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$supplierPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.supplierFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$supplierPayload>
          }
          findMany: {
            args: Prisma.supplierFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$supplierPayload>[]
          }
          create: {
            args: Prisma.supplierCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$supplierPayload>
          }
          createMany: {
            args: Prisma.supplierCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.supplierCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$supplierPayload>[]
          }
          delete: {
            args: Prisma.supplierDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$supplierPayload>
          }
          update: {
            args: Prisma.supplierUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$supplierPayload>
          }
          deleteMany: {
            args: Prisma.supplierDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.supplierUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.supplierUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$supplierPayload>
          }
          aggregate: {
            args: Prisma.SupplierAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSupplier>
          }
          groupBy: {
            args: Prisma.supplierGroupByArgs<ExtArgs>
            result: $Utils.Optional<SupplierGroupByOutputType>[]
          }
          count: {
            args: Prisma.supplierCountArgs<ExtArgs>
            result: $Utils.Optional<SupplierCountAggregateOutputType> | number
          }
        }
      }
      adminuser: {
        payload: Prisma.$adminuserPayload<ExtArgs>
        fields: Prisma.adminuserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.adminuserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminuserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.adminuserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminuserPayload>
          }
          findFirst: {
            args: Prisma.adminuserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminuserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.adminuserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminuserPayload>
          }
          findMany: {
            args: Prisma.adminuserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminuserPayload>[]
          }
          create: {
            args: Prisma.adminuserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminuserPayload>
          }
          createMany: {
            args: Prisma.adminuserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.adminuserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminuserPayload>[]
          }
          delete: {
            args: Prisma.adminuserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminuserPayload>
          }
          update: {
            args: Prisma.adminuserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminuserPayload>
          }
          deleteMany: {
            args: Prisma.adminuserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.adminuserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.adminuserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminuserPayload>
          }
          aggregate: {
            args: Prisma.AdminuserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminuser>
          }
          groupBy: {
            args: Prisma.adminuserGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminuserGroupByOutputType>[]
          }
          count: {
            args: Prisma.adminuserCountArgs<ExtArgs>
            result: $Utils.Optional<AdminuserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PlantCountOutputType
   */

  export type PlantCountOutputType = {
    nurseplant: number
    pricing: number
    seed: number
  }

  export type PlantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nurseplant?: boolean | PlantCountOutputTypeCountNurseplantArgs
    pricing?: boolean | PlantCountOutputTypeCountPricingArgs
    seed?: boolean | PlantCountOutputTypeCountSeedArgs
  }

  // Custom InputTypes
  /**
   * PlantCountOutputType without action
   */
  export type PlantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCountOutputType
     */
    select?: PlantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlantCountOutputType without action
   */
  export type PlantCountOutputTypeCountNurseplantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: nurseplantWhereInput
  }

  /**
   * PlantCountOutputType without action
   */
  export type PlantCountOutputTypeCountPricingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: pricingWhereInput
  }

  /**
   * PlantCountOutputType without action
   */
  export type PlantCountOutputTypeCountSeedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: seedWhereInput
  }


  /**
   * Count Type SupplierCountOutputType
   */

  export type SupplierCountOutputType = {
    seed: number
  }

  export type SupplierCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seed?: boolean | SupplierCountOutputTypeCountSeedArgs
  }

  // Custom InputTypes
  /**
   * SupplierCountOutputType without action
   */
  export type SupplierCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCountOutputType
     */
    select?: SupplierCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SupplierCountOutputType without action
   */
  export type SupplierCountOutputTypeCountSeedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: seedWhereInput
  }


  /**
   * Models
   */

  /**
   * Model customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    cid: number | null
    phone: number | null
    age: number | null
  }

  export type CustomerSumAggregateOutputType = {
    cid: number | null
    phone: number | null
    age: number | null
  }

  export type CustomerMinAggregateOutputType = {
    cid: number | null
    name: string | null
    phone: number | null
    email: string | null
    age: number | null
  }

  export type CustomerMaxAggregateOutputType = {
    cid: number | null
    name: string | null
    phone: number | null
    email: string | null
    age: number | null
  }

  export type CustomerCountAggregateOutputType = {
    cid: number
    name: number
    phone: number
    email: number
    age: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    cid?: true
    phone?: true
    age?: true
  }

  export type CustomerSumAggregateInputType = {
    cid?: true
    phone?: true
    age?: true
  }

  export type CustomerMinAggregateInputType = {
    cid?: true
    name?: true
    phone?: true
    email?: true
    age?: true
  }

  export type CustomerMaxAggregateInputType = {
    cid?: true
    name?: true
    phone?: true
    email?: true
    age?: true
  }

  export type CustomerCountAggregateInputType = {
    cid?: true
    name?: true
    phone?: true
    email?: true
    age?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which customer to aggregate.
     */
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: customerOrderByWithRelationInput | customerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type customerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: customerWhereInput
    orderBy?: customerOrderByWithAggregationInput | customerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: customerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    cid: number
    name: string | null
    phone: number | null
    email: string | null
    age: number | null
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends customerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type customerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cid?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    age?: boolean
  }, ExtArgs["result"]["customer"]>

  export type customerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cid?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    age?: boolean
  }, ExtArgs["result"]["customer"]>

  export type customerSelectScalar = {
    cid?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    age?: boolean
  }


  export type $customerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "customer"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      cid: number
      name: string | null
      phone: number | null
      email: string | null
      age: number | null
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type customerGetPayload<S extends boolean | null | undefined | customerDefaultArgs> = $Result.GetResult<Prisma.$customerPayload, S>

  type customerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<customerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface customerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['customer'], meta: { name: 'customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {customerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends customerFindUniqueArgs>(args: SelectSubset<T, customerFindUniqueArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {customerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends customerFindUniqueOrThrowArgs>(args: SelectSubset<T, customerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends customerFindFirstArgs>(args?: SelectSubset<T, customerFindFirstArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends customerFindFirstOrThrowArgs>(args?: SelectSubset<T, customerFindFirstOrThrowArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `cid`
     * const customerWithCidOnly = await prisma.customer.findMany({ select: { cid: true } })
     * 
     */
    findMany<T extends customerFindManyArgs>(args?: SelectSubset<T, customerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Customer.
     * @param {customerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends customerCreateArgs>(args: SelectSubset<T, customerCreateArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Customers.
     * @param {customerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends customerCreateManyArgs>(args?: SelectSubset<T, customerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {customerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `cid`
     * const customerWithCidOnly = await prisma.customer.createManyAndReturn({ 
     *   select: { cid: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends customerCreateManyAndReturnArgs>(args?: SelectSubset<T, customerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Customer.
     * @param {customerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends customerDeleteArgs>(args: SelectSubset<T, customerDeleteArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Customer.
     * @param {customerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends customerUpdateArgs>(args: SelectSubset<T, customerUpdateArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Customers.
     * @param {customerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends customerDeleteManyArgs>(args?: SelectSubset<T, customerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends customerUpdateManyArgs>(args: SelectSubset<T, customerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {customerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends customerUpsertArgs>(args: SelectSubset<T, customerUpsertArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends customerCountArgs>(
      args?: Subset<T, customerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends customerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: customerGroupByArgs['orderBy'] }
        : { orderBy?: customerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, customerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the customer model
   */
  readonly fields: customerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__customerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the customer model
   */ 
  interface customerFieldRefs {
    readonly cid: FieldRef<"customer", 'Int'>
    readonly name: FieldRef<"customer", 'String'>
    readonly phone: FieldRef<"customer", 'Int'>
    readonly email: FieldRef<"customer", 'String'>
    readonly age: FieldRef<"customer", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * customer findUnique
   */
  export type customerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Filter, which customer to fetch.
     */
    where: customerWhereUniqueInput
  }

  /**
   * customer findUniqueOrThrow
   */
  export type customerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Filter, which customer to fetch.
     */
    where: customerWhereUniqueInput
  }

  /**
   * customer findFirst
   */
  export type customerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Filter, which customer to fetch.
     */
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: customerOrderByWithRelationInput | customerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customers.
     */
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * customer findFirstOrThrow
   */
  export type customerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Filter, which customer to fetch.
     */
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: customerOrderByWithRelationInput | customerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customers.
     */
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * customer findMany
   */
  export type customerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Filter, which customers to fetch.
     */
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: customerOrderByWithRelationInput | customerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing customers.
     */
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * customer create
   */
  export type customerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * The data needed to create a customer.
     */
    data: XOR<customerCreateInput, customerUncheckedCreateInput>
  }

  /**
   * customer createMany
   */
  export type customerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many customers.
     */
    data: customerCreateManyInput | customerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * customer createManyAndReturn
   */
  export type customerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many customers.
     */
    data: customerCreateManyInput | customerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * customer update
   */
  export type customerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * The data needed to update a customer.
     */
    data: XOR<customerUpdateInput, customerUncheckedUpdateInput>
    /**
     * Choose, which customer to update.
     */
    where: customerWhereUniqueInput
  }

  /**
   * customer updateMany
   */
  export type customerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update customers.
     */
    data: XOR<customerUpdateManyMutationInput, customerUncheckedUpdateManyInput>
    /**
     * Filter which customers to update
     */
    where?: customerWhereInput
  }

  /**
   * customer upsert
   */
  export type customerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * The filter to search for the customer to update in case it exists.
     */
    where: customerWhereUniqueInput
    /**
     * In case the customer found by the `where` argument doesn't exist, create a new customer with this data.
     */
    create: XOR<customerCreateInput, customerUncheckedCreateInput>
    /**
     * In case the customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<customerUpdateInput, customerUncheckedUpdateInput>
  }

  /**
   * customer delete
   */
  export type customerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Filter which customer to delete.
     */
    where: customerWhereUniqueInput
  }

  /**
   * customer deleteMany
   */
  export type customerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which customers to delete
     */
    where?: customerWhereInput
  }

  /**
   * customer without action
   */
  export type customerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
  }


  /**
   * Model nurseplant
   */

  export type AggregateNurseplant = {
    _count: NurseplantCountAggregateOutputType | null
    _avg: NurseplantAvgAggregateOutputType | null
    _sum: NurseplantSumAggregateOutputType | null
    _min: NurseplantMinAggregateOutputType | null
    _max: NurseplantMaxAggregateOutputType | null
  }

  export type NurseplantAvgAggregateOutputType = {
    batch_no: number | null
    stock: number | null
  }

  export type NurseplantSumAggregateOutputType = {
    batch_no: number | null
    stock: number | null
  }

  export type NurseplantMinAggregateOutputType = {
    name: string | null
    batch_no: number | null
    loc: string | null
    stock: number | null
  }

  export type NurseplantMaxAggregateOutputType = {
    name: string | null
    batch_no: number | null
    loc: string | null
    stock: number | null
  }

  export type NurseplantCountAggregateOutputType = {
    name: number
    batch_no: number
    loc: number
    stock: number
    _all: number
  }


  export type NurseplantAvgAggregateInputType = {
    batch_no?: true
    stock?: true
  }

  export type NurseplantSumAggregateInputType = {
    batch_no?: true
    stock?: true
  }

  export type NurseplantMinAggregateInputType = {
    name?: true
    batch_no?: true
    loc?: true
    stock?: true
  }

  export type NurseplantMaxAggregateInputType = {
    name?: true
    batch_no?: true
    loc?: true
    stock?: true
  }

  export type NurseplantCountAggregateInputType = {
    name?: true
    batch_no?: true
    loc?: true
    stock?: true
    _all?: true
  }

  export type NurseplantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which nurseplant to aggregate.
     */
    where?: nurseplantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of nurseplants to fetch.
     */
    orderBy?: nurseplantOrderByWithRelationInput | nurseplantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: nurseplantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` nurseplants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` nurseplants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned nurseplants
    **/
    _count?: true | NurseplantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NurseplantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NurseplantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NurseplantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NurseplantMaxAggregateInputType
  }

  export type GetNurseplantAggregateType<T extends NurseplantAggregateArgs> = {
        [P in keyof T & keyof AggregateNurseplant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNurseplant[P]>
      : GetScalarType<T[P], AggregateNurseplant[P]>
  }




  export type nurseplantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: nurseplantWhereInput
    orderBy?: nurseplantOrderByWithAggregationInput | nurseplantOrderByWithAggregationInput[]
    by: NurseplantScalarFieldEnum[] | NurseplantScalarFieldEnum
    having?: nurseplantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NurseplantCountAggregateInputType | true
    _avg?: NurseplantAvgAggregateInputType
    _sum?: NurseplantSumAggregateInputType
    _min?: NurseplantMinAggregateInputType
    _max?: NurseplantMaxAggregateInputType
  }

  export type NurseplantGroupByOutputType = {
    name: string
    batch_no: number
    loc: string | null
    stock: number | null
    _count: NurseplantCountAggregateOutputType | null
    _avg: NurseplantAvgAggregateOutputType | null
    _sum: NurseplantSumAggregateOutputType | null
    _min: NurseplantMinAggregateOutputType | null
    _max: NurseplantMaxAggregateOutputType | null
  }

  type GetNurseplantGroupByPayload<T extends nurseplantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NurseplantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NurseplantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NurseplantGroupByOutputType[P]>
            : GetScalarType<T[P], NurseplantGroupByOutputType[P]>
        }
      >
    >


  export type nurseplantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    batch_no?: boolean
    loc?: boolean
    stock?: boolean
    plant?: boolean | plantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nurseplant"]>

  export type nurseplantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    batch_no?: boolean
    loc?: boolean
    stock?: boolean
    plant?: boolean | plantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nurseplant"]>

  export type nurseplantSelectScalar = {
    name?: boolean
    batch_no?: boolean
    loc?: boolean
    stock?: boolean
  }

  export type nurseplantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | plantDefaultArgs<ExtArgs>
  }
  export type nurseplantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | plantDefaultArgs<ExtArgs>
  }

  export type $nurseplantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "nurseplant"
    objects: {
      plant: Prisma.$plantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      batch_no: number
      loc: string | null
      stock: number | null
    }, ExtArgs["result"]["nurseplant"]>
    composites: {}
  }

  type nurseplantGetPayload<S extends boolean | null | undefined | nurseplantDefaultArgs> = $Result.GetResult<Prisma.$nurseplantPayload, S>

  type nurseplantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<nurseplantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NurseplantCountAggregateInputType | true
    }

  export interface nurseplantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['nurseplant'], meta: { name: 'nurseplant' } }
    /**
     * Find zero or one Nurseplant that matches the filter.
     * @param {nurseplantFindUniqueArgs} args - Arguments to find a Nurseplant
     * @example
     * // Get one Nurseplant
     * const nurseplant = await prisma.nurseplant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends nurseplantFindUniqueArgs>(args: SelectSubset<T, nurseplantFindUniqueArgs<ExtArgs>>): Prisma__nurseplantClient<$Result.GetResult<Prisma.$nurseplantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Nurseplant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {nurseplantFindUniqueOrThrowArgs} args - Arguments to find a Nurseplant
     * @example
     * // Get one Nurseplant
     * const nurseplant = await prisma.nurseplant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends nurseplantFindUniqueOrThrowArgs>(args: SelectSubset<T, nurseplantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__nurseplantClient<$Result.GetResult<Prisma.$nurseplantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Nurseplant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nurseplantFindFirstArgs} args - Arguments to find a Nurseplant
     * @example
     * // Get one Nurseplant
     * const nurseplant = await prisma.nurseplant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends nurseplantFindFirstArgs>(args?: SelectSubset<T, nurseplantFindFirstArgs<ExtArgs>>): Prisma__nurseplantClient<$Result.GetResult<Prisma.$nurseplantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Nurseplant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nurseplantFindFirstOrThrowArgs} args - Arguments to find a Nurseplant
     * @example
     * // Get one Nurseplant
     * const nurseplant = await prisma.nurseplant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends nurseplantFindFirstOrThrowArgs>(args?: SelectSubset<T, nurseplantFindFirstOrThrowArgs<ExtArgs>>): Prisma__nurseplantClient<$Result.GetResult<Prisma.$nurseplantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Nurseplants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nurseplantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Nurseplants
     * const nurseplants = await prisma.nurseplant.findMany()
     * 
     * // Get first 10 Nurseplants
     * const nurseplants = await prisma.nurseplant.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const nurseplantWithNameOnly = await prisma.nurseplant.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends nurseplantFindManyArgs>(args?: SelectSubset<T, nurseplantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$nurseplantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Nurseplant.
     * @param {nurseplantCreateArgs} args - Arguments to create a Nurseplant.
     * @example
     * // Create one Nurseplant
     * const Nurseplant = await prisma.nurseplant.create({
     *   data: {
     *     // ... data to create a Nurseplant
     *   }
     * })
     * 
     */
    create<T extends nurseplantCreateArgs>(args: SelectSubset<T, nurseplantCreateArgs<ExtArgs>>): Prisma__nurseplantClient<$Result.GetResult<Prisma.$nurseplantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Nurseplants.
     * @param {nurseplantCreateManyArgs} args - Arguments to create many Nurseplants.
     * @example
     * // Create many Nurseplants
     * const nurseplant = await prisma.nurseplant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends nurseplantCreateManyArgs>(args?: SelectSubset<T, nurseplantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Nurseplants and returns the data saved in the database.
     * @param {nurseplantCreateManyAndReturnArgs} args - Arguments to create many Nurseplants.
     * @example
     * // Create many Nurseplants
     * const nurseplant = await prisma.nurseplant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Nurseplants and only return the `name`
     * const nurseplantWithNameOnly = await prisma.nurseplant.createManyAndReturn({ 
     *   select: { name: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends nurseplantCreateManyAndReturnArgs>(args?: SelectSubset<T, nurseplantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$nurseplantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Nurseplant.
     * @param {nurseplantDeleteArgs} args - Arguments to delete one Nurseplant.
     * @example
     * // Delete one Nurseplant
     * const Nurseplant = await prisma.nurseplant.delete({
     *   where: {
     *     // ... filter to delete one Nurseplant
     *   }
     * })
     * 
     */
    delete<T extends nurseplantDeleteArgs>(args: SelectSubset<T, nurseplantDeleteArgs<ExtArgs>>): Prisma__nurseplantClient<$Result.GetResult<Prisma.$nurseplantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Nurseplant.
     * @param {nurseplantUpdateArgs} args - Arguments to update one Nurseplant.
     * @example
     * // Update one Nurseplant
     * const nurseplant = await prisma.nurseplant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends nurseplantUpdateArgs>(args: SelectSubset<T, nurseplantUpdateArgs<ExtArgs>>): Prisma__nurseplantClient<$Result.GetResult<Prisma.$nurseplantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Nurseplants.
     * @param {nurseplantDeleteManyArgs} args - Arguments to filter Nurseplants to delete.
     * @example
     * // Delete a few Nurseplants
     * const { count } = await prisma.nurseplant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends nurseplantDeleteManyArgs>(args?: SelectSubset<T, nurseplantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nurseplants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nurseplantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Nurseplants
     * const nurseplant = await prisma.nurseplant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends nurseplantUpdateManyArgs>(args: SelectSubset<T, nurseplantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Nurseplant.
     * @param {nurseplantUpsertArgs} args - Arguments to update or create a Nurseplant.
     * @example
     * // Update or create a Nurseplant
     * const nurseplant = await prisma.nurseplant.upsert({
     *   create: {
     *     // ... data to create a Nurseplant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Nurseplant we want to update
     *   }
     * })
     */
    upsert<T extends nurseplantUpsertArgs>(args: SelectSubset<T, nurseplantUpsertArgs<ExtArgs>>): Prisma__nurseplantClient<$Result.GetResult<Prisma.$nurseplantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Nurseplants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nurseplantCountArgs} args - Arguments to filter Nurseplants to count.
     * @example
     * // Count the number of Nurseplants
     * const count = await prisma.nurseplant.count({
     *   where: {
     *     // ... the filter for the Nurseplants we want to count
     *   }
     * })
    **/
    count<T extends nurseplantCountArgs>(
      args?: Subset<T, nurseplantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NurseplantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Nurseplant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NurseplantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NurseplantAggregateArgs>(args: Subset<T, NurseplantAggregateArgs>): Prisma.PrismaPromise<GetNurseplantAggregateType<T>>

    /**
     * Group by Nurseplant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nurseplantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends nurseplantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: nurseplantGroupByArgs['orderBy'] }
        : { orderBy?: nurseplantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, nurseplantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNurseplantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the nurseplant model
   */
  readonly fields: nurseplantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for nurseplant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__nurseplantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plant<T extends plantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, plantDefaultArgs<ExtArgs>>): Prisma__plantClient<$Result.GetResult<Prisma.$plantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the nurseplant model
   */ 
  interface nurseplantFieldRefs {
    readonly name: FieldRef<"nurseplant", 'String'>
    readonly batch_no: FieldRef<"nurseplant", 'Int'>
    readonly loc: FieldRef<"nurseplant", 'String'>
    readonly stock: FieldRef<"nurseplant", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * nurseplant findUnique
   */
  export type nurseplantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nurseplant
     */
    select?: nurseplantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nurseplantInclude<ExtArgs> | null
    /**
     * Filter, which nurseplant to fetch.
     */
    where: nurseplantWhereUniqueInput
  }

  /**
   * nurseplant findUniqueOrThrow
   */
  export type nurseplantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nurseplant
     */
    select?: nurseplantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nurseplantInclude<ExtArgs> | null
    /**
     * Filter, which nurseplant to fetch.
     */
    where: nurseplantWhereUniqueInput
  }

  /**
   * nurseplant findFirst
   */
  export type nurseplantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nurseplant
     */
    select?: nurseplantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nurseplantInclude<ExtArgs> | null
    /**
     * Filter, which nurseplant to fetch.
     */
    where?: nurseplantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of nurseplants to fetch.
     */
    orderBy?: nurseplantOrderByWithRelationInput | nurseplantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for nurseplants.
     */
    cursor?: nurseplantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` nurseplants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` nurseplants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of nurseplants.
     */
    distinct?: NurseplantScalarFieldEnum | NurseplantScalarFieldEnum[]
  }

  /**
   * nurseplant findFirstOrThrow
   */
  export type nurseplantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nurseplant
     */
    select?: nurseplantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nurseplantInclude<ExtArgs> | null
    /**
     * Filter, which nurseplant to fetch.
     */
    where?: nurseplantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of nurseplants to fetch.
     */
    orderBy?: nurseplantOrderByWithRelationInput | nurseplantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for nurseplants.
     */
    cursor?: nurseplantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` nurseplants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` nurseplants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of nurseplants.
     */
    distinct?: NurseplantScalarFieldEnum | NurseplantScalarFieldEnum[]
  }

  /**
   * nurseplant findMany
   */
  export type nurseplantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nurseplant
     */
    select?: nurseplantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nurseplantInclude<ExtArgs> | null
    /**
     * Filter, which nurseplants to fetch.
     */
    where?: nurseplantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of nurseplants to fetch.
     */
    orderBy?: nurseplantOrderByWithRelationInput | nurseplantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing nurseplants.
     */
    cursor?: nurseplantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` nurseplants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` nurseplants.
     */
    skip?: number
    distinct?: NurseplantScalarFieldEnum | NurseplantScalarFieldEnum[]
  }

  /**
   * nurseplant create
   */
  export type nurseplantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nurseplant
     */
    select?: nurseplantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nurseplantInclude<ExtArgs> | null
    /**
     * The data needed to create a nurseplant.
     */
    data: XOR<nurseplantCreateInput, nurseplantUncheckedCreateInput>
  }

  /**
   * nurseplant createMany
   */
  export type nurseplantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many nurseplants.
     */
    data: nurseplantCreateManyInput | nurseplantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * nurseplant createManyAndReturn
   */
  export type nurseplantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nurseplant
     */
    select?: nurseplantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many nurseplants.
     */
    data: nurseplantCreateManyInput | nurseplantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nurseplantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * nurseplant update
   */
  export type nurseplantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nurseplant
     */
    select?: nurseplantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nurseplantInclude<ExtArgs> | null
    /**
     * The data needed to update a nurseplant.
     */
    data: XOR<nurseplantUpdateInput, nurseplantUncheckedUpdateInput>
    /**
     * Choose, which nurseplant to update.
     */
    where: nurseplantWhereUniqueInput
  }

  /**
   * nurseplant updateMany
   */
  export type nurseplantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update nurseplants.
     */
    data: XOR<nurseplantUpdateManyMutationInput, nurseplantUncheckedUpdateManyInput>
    /**
     * Filter which nurseplants to update
     */
    where?: nurseplantWhereInput
  }

  /**
   * nurseplant upsert
   */
  export type nurseplantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nurseplant
     */
    select?: nurseplantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nurseplantInclude<ExtArgs> | null
    /**
     * The filter to search for the nurseplant to update in case it exists.
     */
    where: nurseplantWhereUniqueInput
    /**
     * In case the nurseplant found by the `where` argument doesn't exist, create a new nurseplant with this data.
     */
    create: XOR<nurseplantCreateInput, nurseplantUncheckedCreateInput>
    /**
     * In case the nurseplant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<nurseplantUpdateInput, nurseplantUncheckedUpdateInput>
  }

  /**
   * nurseplant delete
   */
  export type nurseplantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nurseplant
     */
    select?: nurseplantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nurseplantInclude<ExtArgs> | null
    /**
     * Filter which nurseplant to delete.
     */
    where: nurseplantWhereUniqueInput
  }

  /**
   * nurseplant deleteMany
   */
  export type nurseplantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which nurseplants to delete
     */
    where?: nurseplantWhereInput
  }

  /**
   * nurseplant without action
   */
  export type nurseplantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nurseplant
     */
    select?: nurseplantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nurseplantInclude<ExtArgs> | null
  }


  /**
   * Model plant
   */

  export type AggregatePlant = {
    _count: PlantCountAggregateOutputType | null
    _avg: PlantAvgAggregateOutputType | null
    _sum: PlantSumAggregateOutputType | null
    _min: PlantMinAggregateOutputType | null
    _max: PlantMaxAggregateOutputType | null
  }

  export type PlantAvgAggregateOutputType = {
    lifespan: number | null
    height: number | null
    soil_ph: number | null
    temperature: number | null
  }

  export type PlantSumAggregateOutputType = {
    lifespan: number | null
    height: number | null
    soil_ph: number | null
    temperature: number | null
  }

  export type PlantMinAggregateOutputType = {
    name: string | null
    water: string | null
    sunlight: string | null
    lifespan: number | null
    height: number | null
    fruit_nut: string | null
    soil_ph: number | null
    temperature: number | null
    fertilizer: string | null
    pest: string | null
    comp_plants: string | null
  }

  export type PlantMaxAggregateOutputType = {
    name: string | null
    water: string | null
    sunlight: string | null
    lifespan: number | null
    height: number | null
    fruit_nut: string | null
    soil_ph: number | null
    temperature: number | null
    fertilizer: string | null
    pest: string | null
    comp_plants: string | null
  }

  export type PlantCountAggregateOutputType = {
    name: number
    water: number
    sunlight: number
    lifespan: number
    height: number
    fruit_nut: number
    soil_ph: number
    temperature: number
    fertilizer: number
    pest: number
    comp_plants: number
    _all: number
  }


  export type PlantAvgAggregateInputType = {
    lifespan?: true
    height?: true
    soil_ph?: true
    temperature?: true
  }

  export type PlantSumAggregateInputType = {
    lifespan?: true
    height?: true
    soil_ph?: true
    temperature?: true
  }

  export type PlantMinAggregateInputType = {
    name?: true
    water?: true
    sunlight?: true
    lifespan?: true
    height?: true
    fruit_nut?: true
    soil_ph?: true
    temperature?: true
    fertilizer?: true
    pest?: true
    comp_plants?: true
  }

  export type PlantMaxAggregateInputType = {
    name?: true
    water?: true
    sunlight?: true
    lifespan?: true
    height?: true
    fruit_nut?: true
    soil_ph?: true
    temperature?: true
    fertilizer?: true
    pest?: true
    comp_plants?: true
  }

  export type PlantCountAggregateInputType = {
    name?: true
    water?: true
    sunlight?: true
    lifespan?: true
    height?: true
    fruit_nut?: true
    soil_ph?: true
    temperature?: true
    fertilizer?: true
    pest?: true
    comp_plants?: true
    _all?: true
  }

  export type PlantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which plant to aggregate.
     */
    where?: plantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of plants to fetch.
     */
    orderBy?: plantOrderByWithRelationInput | plantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: plantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` plants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` plants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned plants
    **/
    _count?: true | PlantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlantMaxAggregateInputType
  }

  export type GetPlantAggregateType<T extends PlantAggregateArgs> = {
        [P in keyof T & keyof AggregatePlant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlant[P]>
      : GetScalarType<T[P], AggregatePlant[P]>
  }




  export type plantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: plantWhereInput
    orderBy?: plantOrderByWithAggregationInput | plantOrderByWithAggregationInput[]
    by: PlantScalarFieldEnum[] | PlantScalarFieldEnum
    having?: plantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlantCountAggregateInputType | true
    _avg?: PlantAvgAggregateInputType
    _sum?: PlantSumAggregateInputType
    _min?: PlantMinAggregateInputType
    _max?: PlantMaxAggregateInputType
  }

  export type PlantGroupByOutputType = {
    name: string
    water: string | null
    sunlight: string | null
    lifespan: number | null
    height: number | null
    fruit_nut: string | null
    soil_ph: number | null
    temperature: number | null
    fertilizer: string | null
    pest: string | null
    comp_plants: string | null
    _count: PlantCountAggregateOutputType | null
    _avg: PlantAvgAggregateOutputType | null
    _sum: PlantSumAggregateOutputType | null
    _min: PlantMinAggregateOutputType | null
    _max: PlantMaxAggregateOutputType | null
  }

  type GetPlantGroupByPayload<T extends plantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlantGroupByOutputType[P]>
            : GetScalarType<T[P], PlantGroupByOutputType[P]>
        }
      >
    >


  export type plantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    water?: boolean
    sunlight?: boolean
    lifespan?: boolean
    height?: boolean
    fruit_nut?: boolean
    soil_ph?: boolean
    temperature?: boolean
    fertilizer?: boolean
    pest?: boolean
    comp_plants?: boolean
    nurseplant?: boolean | plant$nurseplantArgs<ExtArgs>
    pricing?: boolean | plant$pricingArgs<ExtArgs>
    seed?: boolean | plant$seedArgs<ExtArgs>
    _count?: boolean | PlantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plant"]>

  export type plantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    water?: boolean
    sunlight?: boolean
    lifespan?: boolean
    height?: boolean
    fruit_nut?: boolean
    soil_ph?: boolean
    temperature?: boolean
    fertilizer?: boolean
    pest?: boolean
    comp_plants?: boolean
  }, ExtArgs["result"]["plant"]>

  export type plantSelectScalar = {
    name?: boolean
    water?: boolean
    sunlight?: boolean
    lifespan?: boolean
    height?: boolean
    fruit_nut?: boolean
    soil_ph?: boolean
    temperature?: boolean
    fertilizer?: boolean
    pest?: boolean
    comp_plants?: boolean
  }

  export type plantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nurseplant?: boolean | plant$nurseplantArgs<ExtArgs>
    pricing?: boolean | plant$pricingArgs<ExtArgs>
    seed?: boolean | plant$seedArgs<ExtArgs>
    _count?: boolean | PlantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type plantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $plantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "plant"
    objects: {
      nurseplant: Prisma.$nurseplantPayload<ExtArgs>[]
      pricing: Prisma.$pricingPayload<ExtArgs>[]
      seed: Prisma.$seedPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      water: string | null
      sunlight: string | null
      lifespan: number | null
      height: number | null
      fruit_nut: string | null
      soil_ph: number | null
      temperature: number | null
      fertilizer: string | null
      pest: string | null
      comp_plants: string | null
    }, ExtArgs["result"]["plant"]>
    composites: {}
  }

  type plantGetPayload<S extends boolean | null | undefined | plantDefaultArgs> = $Result.GetResult<Prisma.$plantPayload, S>

  type plantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<plantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlantCountAggregateInputType | true
    }

  export interface plantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['plant'], meta: { name: 'plant' } }
    /**
     * Find zero or one Plant that matches the filter.
     * @param {plantFindUniqueArgs} args - Arguments to find a Plant
     * @example
     * // Get one Plant
     * const plant = await prisma.plant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends plantFindUniqueArgs>(args: SelectSubset<T, plantFindUniqueArgs<ExtArgs>>): Prisma__plantClient<$Result.GetResult<Prisma.$plantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Plant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {plantFindUniqueOrThrowArgs} args - Arguments to find a Plant
     * @example
     * // Get one Plant
     * const plant = await prisma.plant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends plantFindUniqueOrThrowArgs>(args: SelectSubset<T, plantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__plantClient<$Result.GetResult<Prisma.$plantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Plant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {plantFindFirstArgs} args - Arguments to find a Plant
     * @example
     * // Get one Plant
     * const plant = await prisma.plant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends plantFindFirstArgs>(args?: SelectSubset<T, plantFindFirstArgs<ExtArgs>>): Prisma__plantClient<$Result.GetResult<Prisma.$plantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Plant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {plantFindFirstOrThrowArgs} args - Arguments to find a Plant
     * @example
     * // Get one Plant
     * const plant = await prisma.plant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends plantFindFirstOrThrowArgs>(args?: SelectSubset<T, plantFindFirstOrThrowArgs<ExtArgs>>): Prisma__plantClient<$Result.GetResult<Prisma.$plantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Plants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {plantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Plants
     * const plants = await prisma.plant.findMany()
     * 
     * // Get first 10 Plants
     * const plants = await prisma.plant.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const plantWithNameOnly = await prisma.plant.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends plantFindManyArgs>(args?: SelectSubset<T, plantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$plantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Plant.
     * @param {plantCreateArgs} args - Arguments to create a Plant.
     * @example
     * // Create one Plant
     * const Plant = await prisma.plant.create({
     *   data: {
     *     // ... data to create a Plant
     *   }
     * })
     * 
     */
    create<T extends plantCreateArgs>(args: SelectSubset<T, plantCreateArgs<ExtArgs>>): Prisma__plantClient<$Result.GetResult<Prisma.$plantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Plants.
     * @param {plantCreateManyArgs} args - Arguments to create many Plants.
     * @example
     * // Create many Plants
     * const plant = await prisma.plant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends plantCreateManyArgs>(args?: SelectSubset<T, plantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Plants and returns the data saved in the database.
     * @param {plantCreateManyAndReturnArgs} args - Arguments to create many Plants.
     * @example
     * // Create many Plants
     * const plant = await prisma.plant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Plants and only return the `name`
     * const plantWithNameOnly = await prisma.plant.createManyAndReturn({ 
     *   select: { name: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends plantCreateManyAndReturnArgs>(args?: SelectSubset<T, plantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$plantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Plant.
     * @param {plantDeleteArgs} args - Arguments to delete one Plant.
     * @example
     * // Delete one Plant
     * const Plant = await prisma.plant.delete({
     *   where: {
     *     // ... filter to delete one Plant
     *   }
     * })
     * 
     */
    delete<T extends plantDeleteArgs>(args: SelectSubset<T, plantDeleteArgs<ExtArgs>>): Prisma__plantClient<$Result.GetResult<Prisma.$plantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Plant.
     * @param {plantUpdateArgs} args - Arguments to update one Plant.
     * @example
     * // Update one Plant
     * const plant = await prisma.plant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends plantUpdateArgs>(args: SelectSubset<T, plantUpdateArgs<ExtArgs>>): Prisma__plantClient<$Result.GetResult<Prisma.$plantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Plants.
     * @param {plantDeleteManyArgs} args - Arguments to filter Plants to delete.
     * @example
     * // Delete a few Plants
     * const { count } = await prisma.plant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends plantDeleteManyArgs>(args?: SelectSubset<T, plantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {plantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Plants
     * const plant = await prisma.plant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends plantUpdateManyArgs>(args: SelectSubset<T, plantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Plant.
     * @param {plantUpsertArgs} args - Arguments to update or create a Plant.
     * @example
     * // Update or create a Plant
     * const plant = await prisma.plant.upsert({
     *   create: {
     *     // ... data to create a Plant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plant we want to update
     *   }
     * })
     */
    upsert<T extends plantUpsertArgs>(args: SelectSubset<T, plantUpsertArgs<ExtArgs>>): Prisma__plantClient<$Result.GetResult<Prisma.$plantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Plants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {plantCountArgs} args - Arguments to filter Plants to count.
     * @example
     * // Count the number of Plants
     * const count = await prisma.plant.count({
     *   where: {
     *     // ... the filter for the Plants we want to count
     *   }
     * })
    **/
    count<T extends plantCountArgs>(
      args?: Subset<T, plantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlantAggregateArgs>(args: Subset<T, PlantAggregateArgs>): Prisma.PrismaPromise<GetPlantAggregateType<T>>

    /**
     * Group by Plant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {plantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends plantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: plantGroupByArgs['orderBy'] }
        : { orderBy?: plantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, plantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the plant model
   */
  readonly fields: plantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for plant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__plantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    nurseplant<T extends plant$nurseplantArgs<ExtArgs> = {}>(args?: Subset<T, plant$nurseplantArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$nurseplantPayload<ExtArgs>, T, "findMany"> | Null>
    pricing<T extends plant$pricingArgs<ExtArgs> = {}>(args?: Subset<T, plant$pricingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pricingPayload<ExtArgs>, T, "findMany"> | Null>
    seed<T extends plant$seedArgs<ExtArgs> = {}>(args?: Subset<T, plant$seedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$seedPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the plant model
   */ 
  interface plantFieldRefs {
    readonly name: FieldRef<"plant", 'String'>
    readonly water: FieldRef<"plant", 'String'>
    readonly sunlight: FieldRef<"plant", 'String'>
    readonly lifespan: FieldRef<"plant", 'Int'>
    readonly height: FieldRef<"plant", 'Float'>
    readonly fruit_nut: FieldRef<"plant", 'String'>
    readonly soil_ph: FieldRef<"plant", 'Float'>
    readonly temperature: FieldRef<"plant", 'Float'>
    readonly fertilizer: FieldRef<"plant", 'String'>
    readonly pest: FieldRef<"plant", 'String'>
    readonly comp_plants: FieldRef<"plant", 'String'>
  }
    

  // Custom InputTypes
  /**
   * plant findUnique
   */
  export type plantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plant
     */
    select?: plantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plantInclude<ExtArgs> | null
    /**
     * Filter, which plant to fetch.
     */
    where: plantWhereUniqueInput
  }

  /**
   * plant findUniqueOrThrow
   */
  export type plantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plant
     */
    select?: plantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plantInclude<ExtArgs> | null
    /**
     * Filter, which plant to fetch.
     */
    where: plantWhereUniqueInput
  }

  /**
   * plant findFirst
   */
  export type plantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plant
     */
    select?: plantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plantInclude<ExtArgs> | null
    /**
     * Filter, which plant to fetch.
     */
    where?: plantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of plants to fetch.
     */
    orderBy?: plantOrderByWithRelationInput | plantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for plants.
     */
    cursor?: plantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` plants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` plants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of plants.
     */
    distinct?: PlantScalarFieldEnum | PlantScalarFieldEnum[]
  }

  /**
   * plant findFirstOrThrow
   */
  export type plantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plant
     */
    select?: plantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plantInclude<ExtArgs> | null
    /**
     * Filter, which plant to fetch.
     */
    where?: plantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of plants to fetch.
     */
    orderBy?: plantOrderByWithRelationInput | plantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for plants.
     */
    cursor?: plantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` plants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` plants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of plants.
     */
    distinct?: PlantScalarFieldEnum | PlantScalarFieldEnum[]
  }

  /**
   * plant findMany
   */
  export type plantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plant
     */
    select?: plantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plantInclude<ExtArgs> | null
    /**
     * Filter, which plants to fetch.
     */
    where?: plantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of plants to fetch.
     */
    orderBy?: plantOrderByWithRelationInput | plantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing plants.
     */
    cursor?: plantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` plants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` plants.
     */
    skip?: number
    distinct?: PlantScalarFieldEnum | PlantScalarFieldEnum[]
  }

  /**
   * plant create
   */
  export type plantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plant
     */
    select?: plantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plantInclude<ExtArgs> | null
    /**
     * The data needed to create a plant.
     */
    data: XOR<plantCreateInput, plantUncheckedCreateInput>
  }

  /**
   * plant createMany
   */
  export type plantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many plants.
     */
    data: plantCreateManyInput | plantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * plant createManyAndReturn
   */
  export type plantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plant
     */
    select?: plantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many plants.
     */
    data: plantCreateManyInput | plantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * plant update
   */
  export type plantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plant
     */
    select?: plantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plantInclude<ExtArgs> | null
    /**
     * The data needed to update a plant.
     */
    data: XOR<plantUpdateInput, plantUncheckedUpdateInput>
    /**
     * Choose, which plant to update.
     */
    where: plantWhereUniqueInput
  }

  /**
   * plant updateMany
   */
  export type plantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update plants.
     */
    data: XOR<plantUpdateManyMutationInput, plantUncheckedUpdateManyInput>
    /**
     * Filter which plants to update
     */
    where?: plantWhereInput
  }

  /**
   * plant upsert
   */
  export type plantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plant
     */
    select?: plantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plantInclude<ExtArgs> | null
    /**
     * The filter to search for the plant to update in case it exists.
     */
    where: plantWhereUniqueInput
    /**
     * In case the plant found by the `where` argument doesn't exist, create a new plant with this data.
     */
    create: XOR<plantCreateInput, plantUncheckedCreateInput>
    /**
     * In case the plant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<plantUpdateInput, plantUncheckedUpdateInput>
  }

  /**
   * plant delete
   */
  export type plantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plant
     */
    select?: plantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plantInclude<ExtArgs> | null
    /**
     * Filter which plant to delete.
     */
    where: plantWhereUniqueInput
  }

  /**
   * plant deleteMany
   */
  export type plantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which plants to delete
     */
    where?: plantWhereInput
  }

  /**
   * plant.nurseplant
   */
  export type plant$nurseplantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nurseplant
     */
    select?: nurseplantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nurseplantInclude<ExtArgs> | null
    where?: nurseplantWhereInput
    orderBy?: nurseplantOrderByWithRelationInput | nurseplantOrderByWithRelationInput[]
    cursor?: nurseplantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NurseplantScalarFieldEnum | NurseplantScalarFieldEnum[]
  }

  /**
   * plant.pricing
   */
  export type plant$pricingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pricing
     */
    select?: pricingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pricingInclude<ExtArgs> | null
    where?: pricingWhereInput
    orderBy?: pricingOrderByWithRelationInput | pricingOrderByWithRelationInput[]
    cursor?: pricingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PricingScalarFieldEnum | PricingScalarFieldEnum[]
  }

  /**
   * plant.seed
   */
  export type plant$seedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seed
     */
    select?: seedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seedInclude<ExtArgs> | null
    where?: seedWhereInput
    orderBy?: seedOrderByWithRelationInput | seedOrderByWithRelationInput[]
    cursor?: seedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeedScalarFieldEnum | SeedScalarFieldEnum[]
  }

  /**
   * plant without action
   */
  export type plantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the plant
     */
    select?: plantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: plantInclude<ExtArgs> | null
  }


  /**
   * Model pricing
   */

  export type AggregatePricing = {
    _count: PricingCountAggregateOutputType | null
    _avg: PricingAvgAggregateOutputType | null
    _sum: PricingSumAggregateOutputType | null
    _min: PricingMinAggregateOutputType | null
    _max: PricingMaxAggregateOutputType | null
  }

  export type PricingAvgAggregateOutputType = {
    id: number | null
    batch_no: number | null
    units: number | null
    unit_price: number | null
    total_price: number | null
    tax: number | null
  }

  export type PricingSumAggregateOutputType = {
    id: number | null
    batch_no: number | null
    units: number | null
    unit_price: number | null
    total_price: number | null
    tax: number | null
  }

  export type PricingMinAggregateOutputType = {
    id: number | null
    pl_name: string | null
    batch_no: number | null
    units: number | null
    unit_price: number | null
    total_price: number | null
    tax: number | null
  }

  export type PricingMaxAggregateOutputType = {
    id: number | null
    pl_name: string | null
    batch_no: number | null
    units: number | null
    unit_price: number | null
    total_price: number | null
    tax: number | null
  }

  export type PricingCountAggregateOutputType = {
    id: number
    pl_name: number
    batch_no: number
    units: number
    unit_price: number
    total_price: number
    tax: number
    _all: number
  }


  export type PricingAvgAggregateInputType = {
    id?: true
    batch_no?: true
    units?: true
    unit_price?: true
    total_price?: true
    tax?: true
  }

  export type PricingSumAggregateInputType = {
    id?: true
    batch_no?: true
    units?: true
    unit_price?: true
    total_price?: true
    tax?: true
  }

  export type PricingMinAggregateInputType = {
    id?: true
    pl_name?: true
    batch_no?: true
    units?: true
    unit_price?: true
    total_price?: true
    tax?: true
  }

  export type PricingMaxAggregateInputType = {
    id?: true
    pl_name?: true
    batch_no?: true
    units?: true
    unit_price?: true
    total_price?: true
    tax?: true
  }

  export type PricingCountAggregateInputType = {
    id?: true
    pl_name?: true
    batch_no?: true
    units?: true
    unit_price?: true
    total_price?: true
    tax?: true
    _all?: true
  }

  export type PricingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which pricing to aggregate.
     */
    where?: pricingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pricings to fetch.
     */
    orderBy?: pricingOrderByWithRelationInput | pricingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: pricingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pricings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pricings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pricings
    **/
    _count?: true | PricingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PricingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PricingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PricingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PricingMaxAggregateInputType
  }

  export type GetPricingAggregateType<T extends PricingAggregateArgs> = {
        [P in keyof T & keyof AggregatePricing]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePricing[P]>
      : GetScalarType<T[P], AggregatePricing[P]>
  }




  export type pricingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: pricingWhereInput
    orderBy?: pricingOrderByWithAggregationInput | pricingOrderByWithAggregationInput[]
    by: PricingScalarFieldEnum[] | PricingScalarFieldEnum
    having?: pricingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PricingCountAggregateInputType | true
    _avg?: PricingAvgAggregateInputType
    _sum?: PricingSumAggregateInputType
    _min?: PricingMinAggregateInputType
    _max?: PricingMaxAggregateInputType
  }

  export type PricingGroupByOutputType = {
    id: number
    pl_name: string
    batch_no: number
    units: number | null
    unit_price: number | null
    total_price: number | null
    tax: number | null
    _count: PricingCountAggregateOutputType | null
    _avg: PricingAvgAggregateOutputType | null
    _sum: PricingSumAggregateOutputType | null
    _min: PricingMinAggregateOutputType | null
    _max: PricingMaxAggregateOutputType | null
  }

  type GetPricingGroupByPayload<T extends pricingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PricingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PricingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PricingGroupByOutputType[P]>
            : GetScalarType<T[P], PricingGroupByOutputType[P]>
        }
      >
    >


  export type pricingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pl_name?: boolean
    batch_no?: boolean
    units?: boolean
    unit_price?: boolean
    total_price?: boolean
    tax?: boolean
    plant?: boolean | plantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pricing"]>

  export type pricingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pl_name?: boolean
    batch_no?: boolean
    units?: boolean
    unit_price?: boolean
    total_price?: boolean
    tax?: boolean
    plant?: boolean | plantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pricing"]>

  export type pricingSelectScalar = {
    id?: boolean
    pl_name?: boolean
    batch_no?: boolean
    units?: boolean
    unit_price?: boolean
    total_price?: boolean
    tax?: boolean
  }

  export type pricingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | plantDefaultArgs<ExtArgs>
  }
  export type pricingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | plantDefaultArgs<ExtArgs>
  }

  export type $pricingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "pricing"
    objects: {
      plant: Prisma.$plantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      pl_name: string
      batch_no: number
      units: number | null
      unit_price: number | null
      total_price: number | null
      tax: number | null
    }, ExtArgs["result"]["pricing"]>
    composites: {}
  }

  type pricingGetPayload<S extends boolean | null | undefined | pricingDefaultArgs> = $Result.GetResult<Prisma.$pricingPayload, S>

  type pricingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<pricingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PricingCountAggregateInputType | true
    }

  export interface pricingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['pricing'], meta: { name: 'pricing' } }
    /**
     * Find zero or one Pricing that matches the filter.
     * @param {pricingFindUniqueArgs} args - Arguments to find a Pricing
     * @example
     * // Get one Pricing
     * const pricing = await prisma.pricing.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends pricingFindUniqueArgs>(args: SelectSubset<T, pricingFindUniqueArgs<ExtArgs>>): Prisma__pricingClient<$Result.GetResult<Prisma.$pricingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Pricing that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {pricingFindUniqueOrThrowArgs} args - Arguments to find a Pricing
     * @example
     * // Get one Pricing
     * const pricing = await prisma.pricing.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends pricingFindUniqueOrThrowArgs>(args: SelectSubset<T, pricingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__pricingClient<$Result.GetResult<Prisma.$pricingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Pricing that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pricingFindFirstArgs} args - Arguments to find a Pricing
     * @example
     * // Get one Pricing
     * const pricing = await prisma.pricing.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends pricingFindFirstArgs>(args?: SelectSubset<T, pricingFindFirstArgs<ExtArgs>>): Prisma__pricingClient<$Result.GetResult<Prisma.$pricingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Pricing that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pricingFindFirstOrThrowArgs} args - Arguments to find a Pricing
     * @example
     * // Get one Pricing
     * const pricing = await prisma.pricing.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends pricingFindFirstOrThrowArgs>(args?: SelectSubset<T, pricingFindFirstOrThrowArgs<ExtArgs>>): Prisma__pricingClient<$Result.GetResult<Prisma.$pricingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Pricings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pricingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pricings
     * const pricings = await prisma.pricing.findMany()
     * 
     * // Get first 10 Pricings
     * const pricings = await prisma.pricing.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pricingWithIdOnly = await prisma.pricing.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends pricingFindManyArgs>(args?: SelectSubset<T, pricingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pricingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Pricing.
     * @param {pricingCreateArgs} args - Arguments to create a Pricing.
     * @example
     * // Create one Pricing
     * const Pricing = await prisma.pricing.create({
     *   data: {
     *     // ... data to create a Pricing
     *   }
     * })
     * 
     */
    create<T extends pricingCreateArgs>(args: SelectSubset<T, pricingCreateArgs<ExtArgs>>): Prisma__pricingClient<$Result.GetResult<Prisma.$pricingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Pricings.
     * @param {pricingCreateManyArgs} args - Arguments to create many Pricings.
     * @example
     * // Create many Pricings
     * const pricing = await prisma.pricing.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends pricingCreateManyArgs>(args?: SelectSubset<T, pricingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pricings and returns the data saved in the database.
     * @param {pricingCreateManyAndReturnArgs} args - Arguments to create many Pricings.
     * @example
     * // Create many Pricings
     * const pricing = await prisma.pricing.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pricings and only return the `id`
     * const pricingWithIdOnly = await prisma.pricing.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends pricingCreateManyAndReturnArgs>(args?: SelectSubset<T, pricingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pricingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Pricing.
     * @param {pricingDeleteArgs} args - Arguments to delete one Pricing.
     * @example
     * // Delete one Pricing
     * const Pricing = await prisma.pricing.delete({
     *   where: {
     *     // ... filter to delete one Pricing
     *   }
     * })
     * 
     */
    delete<T extends pricingDeleteArgs>(args: SelectSubset<T, pricingDeleteArgs<ExtArgs>>): Prisma__pricingClient<$Result.GetResult<Prisma.$pricingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Pricing.
     * @param {pricingUpdateArgs} args - Arguments to update one Pricing.
     * @example
     * // Update one Pricing
     * const pricing = await prisma.pricing.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends pricingUpdateArgs>(args: SelectSubset<T, pricingUpdateArgs<ExtArgs>>): Prisma__pricingClient<$Result.GetResult<Prisma.$pricingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Pricings.
     * @param {pricingDeleteManyArgs} args - Arguments to filter Pricings to delete.
     * @example
     * // Delete a few Pricings
     * const { count } = await prisma.pricing.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends pricingDeleteManyArgs>(args?: SelectSubset<T, pricingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pricings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pricingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pricings
     * const pricing = await prisma.pricing.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends pricingUpdateManyArgs>(args: SelectSubset<T, pricingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pricing.
     * @param {pricingUpsertArgs} args - Arguments to update or create a Pricing.
     * @example
     * // Update or create a Pricing
     * const pricing = await prisma.pricing.upsert({
     *   create: {
     *     // ... data to create a Pricing
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pricing we want to update
     *   }
     * })
     */
    upsert<T extends pricingUpsertArgs>(args: SelectSubset<T, pricingUpsertArgs<ExtArgs>>): Prisma__pricingClient<$Result.GetResult<Prisma.$pricingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Pricings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pricingCountArgs} args - Arguments to filter Pricings to count.
     * @example
     * // Count the number of Pricings
     * const count = await prisma.pricing.count({
     *   where: {
     *     // ... the filter for the Pricings we want to count
     *   }
     * })
    **/
    count<T extends pricingCountArgs>(
      args?: Subset<T, pricingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PricingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pricing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PricingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PricingAggregateArgs>(args: Subset<T, PricingAggregateArgs>): Prisma.PrismaPromise<GetPricingAggregateType<T>>

    /**
     * Group by Pricing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pricingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends pricingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: pricingGroupByArgs['orderBy'] }
        : { orderBy?: pricingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, pricingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPricingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the pricing model
   */
  readonly fields: pricingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for pricing.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__pricingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plant<T extends plantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, plantDefaultArgs<ExtArgs>>): Prisma__plantClient<$Result.GetResult<Prisma.$plantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the pricing model
   */ 
  interface pricingFieldRefs {
    readonly id: FieldRef<"pricing", 'Int'>
    readonly pl_name: FieldRef<"pricing", 'String'>
    readonly batch_no: FieldRef<"pricing", 'Int'>
    readonly units: FieldRef<"pricing", 'Int'>
    readonly unit_price: FieldRef<"pricing", 'Float'>
    readonly total_price: FieldRef<"pricing", 'Float'>
    readonly tax: FieldRef<"pricing", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * pricing findUnique
   */
  export type pricingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pricing
     */
    select?: pricingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pricingInclude<ExtArgs> | null
    /**
     * Filter, which pricing to fetch.
     */
    where: pricingWhereUniqueInput
  }

  /**
   * pricing findUniqueOrThrow
   */
  export type pricingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pricing
     */
    select?: pricingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pricingInclude<ExtArgs> | null
    /**
     * Filter, which pricing to fetch.
     */
    where: pricingWhereUniqueInput
  }

  /**
   * pricing findFirst
   */
  export type pricingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pricing
     */
    select?: pricingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pricingInclude<ExtArgs> | null
    /**
     * Filter, which pricing to fetch.
     */
    where?: pricingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pricings to fetch.
     */
    orderBy?: pricingOrderByWithRelationInput | pricingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pricings.
     */
    cursor?: pricingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pricings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pricings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pricings.
     */
    distinct?: PricingScalarFieldEnum | PricingScalarFieldEnum[]
  }

  /**
   * pricing findFirstOrThrow
   */
  export type pricingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pricing
     */
    select?: pricingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pricingInclude<ExtArgs> | null
    /**
     * Filter, which pricing to fetch.
     */
    where?: pricingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pricings to fetch.
     */
    orderBy?: pricingOrderByWithRelationInput | pricingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pricings.
     */
    cursor?: pricingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pricings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pricings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pricings.
     */
    distinct?: PricingScalarFieldEnum | PricingScalarFieldEnum[]
  }

  /**
   * pricing findMany
   */
  export type pricingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pricing
     */
    select?: pricingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pricingInclude<ExtArgs> | null
    /**
     * Filter, which pricings to fetch.
     */
    where?: pricingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pricings to fetch.
     */
    orderBy?: pricingOrderByWithRelationInput | pricingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pricings.
     */
    cursor?: pricingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pricings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pricings.
     */
    skip?: number
    distinct?: PricingScalarFieldEnum | PricingScalarFieldEnum[]
  }

  /**
   * pricing create
   */
  export type pricingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pricing
     */
    select?: pricingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pricingInclude<ExtArgs> | null
    /**
     * The data needed to create a pricing.
     */
    data: XOR<pricingCreateInput, pricingUncheckedCreateInput>
  }

  /**
   * pricing createMany
   */
  export type pricingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many pricings.
     */
    data: pricingCreateManyInput | pricingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * pricing createManyAndReturn
   */
  export type pricingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pricing
     */
    select?: pricingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many pricings.
     */
    data: pricingCreateManyInput | pricingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pricingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * pricing update
   */
  export type pricingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pricing
     */
    select?: pricingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pricingInclude<ExtArgs> | null
    /**
     * The data needed to update a pricing.
     */
    data: XOR<pricingUpdateInput, pricingUncheckedUpdateInput>
    /**
     * Choose, which pricing to update.
     */
    where: pricingWhereUniqueInput
  }

  /**
   * pricing updateMany
   */
  export type pricingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update pricings.
     */
    data: XOR<pricingUpdateManyMutationInput, pricingUncheckedUpdateManyInput>
    /**
     * Filter which pricings to update
     */
    where?: pricingWhereInput
  }

  /**
   * pricing upsert
   */
  export type pricingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pricing
     */
    select?: pricingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pricingInclude<ExtArgs> | null
    /**
     * The filter to search for the pricing to update in case it exists.
     */
    where: pricingWhereUniqueInput
    /**
     * In case the pricing found by the `where` argument doesn't exist, create a new pricing with this data.
     */
    create: XOR<pricingCreateInput, pricingUncheckedCreateInput>
    /**
     * In case the pricing was found with the provided `where` argument, update it with this data.
     */
    update: XOR<pricingUpdateInput, pricingUncheckedUpdateInput>
  }

  /**
   * pricing delete
   */
  export type pricingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pricing
     */
    select?: pricingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pricingInclude<ExtArgs> | null
    /**
     * Filter which pricing to delete.
     */
    where: pricingWhereUniqueInput
  }

  /**
   * pricing deleteMany
   */
  export type pricingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which pricings to delete
     */
    where?: pricingWhereInput
  }

  /**
   * pricing without action
   */
  export type pricingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pricing
     */
    select?: pricingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pricingInclude<ExtArgs> | null
  }


  /**
   * Model seed
   */

  export type AggregateSeed = {
    _count: SeedCountAggregateOutputType | null
    _avg: SeedAvgAggregateOutputType | null
    _sum: SeedSumAggregateOutputType | null
    _min: SeedMinAggregateOutputType | null
    _max: SeedMaxAggregateOutputType | null
  }

  export type SeedAvgAggregateOutputType = {
    sid: number | null
    quantity: number | null
    price: number | null
    temp: number | null
  }

  export type SeedSumAggregateOutputType = {
    sid: number | null
    quantity: number | null
    price: number | null
    temp: number | null
  }

  export type SeedMinAggregateOutputType = {
    pl_name: string | null
    sid: number | null
    quantity: number | null
    price: number | null
    temp: number | null
    humidity: string | null
    expiration_date: Date | null
  }

  export type SeedMaxAggregateOutputType = {
    pl_name: string | null
    sid: number | null
    quantity: number | null
    price: number | null
    temp: number | null
    humidity: string | null
    expiration_date: Date | null
  }

  export type SeedCountAggregateOutputType = {
    pl_name: number
    sid: number
    quantity: number
    price: number
    temp: number
    humidity: number
    expiration_date: number
    _all: number
  }


  export type SeedAvgAggregateInputType = {
    sid?: true
    quantity?: true
    price?: true
    temp?: true
  }

  export type SeedSumAggregateInputType = {
    sid?: true
    quantity?: true
    price?: true
    temp?: true
  }

  export type SeedMinAggregateInputType = {
    pl_name?: true
    sid?: true
    quantity?: true
    price?: true
    temp?: true
    humidity?: true
    expiration_date?: true
  }

  export type SeedMaxAggregateInputType = {
    pl_name?: true
    sid?: true
    quantity?: true
    price?: true
    temp?: true
    humidity?: true
    expiration_date?: true
  }

  export type SeedCountAggregateInputType = {
    pl_name?: true
    sid?: true
    quantity?: true
    price?: true
    temp?: true
    humidity?: true
    expiration_date?: true
    _all?: true
  }

  export type SeedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which seed to aggregate.
     */
    where?: seedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seeds to fetch.
     */
    orderBy?: seedOrderByWithRelationInput | seedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: seedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned seeds
    **/
    _count?: true | SeedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeedMaxAggregateInputType
  }

  export type GetSeedAggregateType<T extends SeedAggregateArgs> = {
        [P in keyof T & keyof AggregateSeed]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeed[P]>
      : GetScalarType<T[P], AggregateSeed[P]>
  }




  export type seedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: seedWhereInput
    orderBy?: seedOrderByWithAggregationInput | seedOrderByWithAggregationInput[]
    by: SeedScalarFieldEnum[] | SeedScalarFieldEnum
    having?: seedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeedCountAggregateInputType | true
    _avg?: SeedAvgAggregateInputType
    _sum?: SeedSumAggregateInputType
    _min?: SeedMinAggregateInputType
    _max?: SeedMaxAggregateInputType
  }

  export type SeedGroupByOutputType = {
    pl_name: string
    sid: number
    quantity: number | null
    price: number | null
    temp: number | null
    humidity: string | null
    expiration_date: Date | null
    _count: SeedCountAggregateOutputType | null
    _avg: SeedAvgAggregateOutputType | null
    _sum: SeedSumAggregateOutputType | null
    _min: SeedMinAggregateOutputType | null
    _max: SeedMaxAggregateOutputType | null
  }

  type GetSeedGroupByPayload<T extends seedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeedGroupByOutputType[P]>
            : GetScalarType<T[P], SeedGroupByOutputType[P]>
        }
      >
    >


  export type seedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pl_name?: boolean
    sid?: boolean
    quantity?: boolean
    price?: boolean
    temp?: boolean
    humidity?: boolean
    expiration_date?: boolean
    plant?: boolean | plantDefaultArgs<ExtArgs>
    supplier?: boolean | supplierDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seed"]>

  export type seedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pl_name?: boolean
    sid?: boolean
    quantity?: boolean
    price?: boolean
    temp?: boolean
    humidity?: boolean
    expiration_date?: boolean
    plant?: boolean | plantDefaultArgs<ExtArgs>
    supplier?: boolean | supplierDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seed"]>

  export type seedSelectScalar = {
    pl_name?: boolean
    sid?: boolean
    quantity?: boolean
    price?: boolean
    temp?: boolean
    humidity?: boolean
    expiration_date?: boolean
  }

  export type seedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | plantDefaultArgs<ExtArgs>
    supplier?: boolean | supplierDefaultArgs<ExtArgs>
  }
  export type seedIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | plantDefaultArgs<ExtArgs>
    supplier?: boolean | supplierDefaultArgs<ExtArgs>
  }

  export type $seedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "seed"
    objects: {
      plant: Prisma.$plantPayload<ExtArgs>
      supplier: Prisma.$supplierPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      pl_name: string
      sid: number
      quantity: number | null
      price: number | null
      temp: number | null
      humidity: string | null
      expiration_date: Date | null
    }, ExtArgs["result"]["seed"]>
    composites: {}
  }

  type seedGetPayload<S extends boolean | null | undefined | seedDefaultArgs> = $Result.GetResult<Prisma.$seedPayload, S>

  type seedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<seedFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeedCountAggregateInputType | true
    }

  export interface seedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['seed'], meta: { name: 'seed' } }
    /**
     * Find zero or one Seed that matches the filter.
     * @param {seedFindUniqueArgs} args - Arguments to find a Seed
     * @example
     * // Get one Seed
     * const seed = await prisma.seed.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends seedFindUniqueArgs>(args: SelectSubset<T, seedFindUniqueArgs<ExtArgs>>): Prisma__seedClient<$Result.GetResult<Prisma.$seedPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Seed that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {seedFindUniqueOrThrowArgs} args - Arguments to find a Seed
     * @example
     * // Get one Seed
     * const seed = await prisma.seed.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends seedFindUniqueOrThrowArgs>(args: SelectSubset<T, seedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__seedClient<$Result.GetResult<Prisma.$seedPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Seed that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seedFindFirstArgs} args - Arguments to find a Seed
     * @example
     * // Get one Seed
     * const seed = await prisma.seed.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends seedFindFirstArgs>(args?: SelectSubset<T, seedFindFirstArgs<ExtArgs>>): Prisma__seedClient<$Result.GetResult<Prisma.$seedPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Seed that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seedFindFirstOrThrowArgs} args - Arguments to find a Seed
     * @example
     * // Get one Seed
     * const seed = await prisma.seed.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends seedFindFirstOrThrowArgs>(args?: SelectSubset<T, seedFindFirstOrThrowArgs<ExtArgs>>): Prisma__seedClient<$Result.GetResult<Prisma.$seedPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Seeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seeds
     * const seeds = await prisma.seed.findMany()
     * 
     * // Get first 10 Seeds
     * const seeds = await prisma.seed.findMany({ take: 10 })
     * 
     * // Only select the `pl_name`
     * const seedWithPl_nameOnly = await prisma.seed.findMany({ select: { pl_name: true } })
     * 
     */
    findMany<T extends seedFindManyArgs>(args?: SelectSubset<T, seedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$seedPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Seed.
     * @param {seedCreateArgs} args - Arguments to create a Seed.
     * @example
     * // Create one Seed
     * const Seed = await prisma.seed.create({
     *   data: {
     *     // ... data to create a Seed
     *   }
     * })
     * 
     */
    create<T extends seedCreateArgs>(args: SelectSubset<T, seedCreateArgs<ExtArgs>>): Prisma__seedClient<$Result.GetResult<Prisma.$seedPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Seeds.
     * @param {seedCreateManyArgs} args - Arguments to create many Seeds.
     * @example
     * // Create many Seeds
     * const seed = await prisma.seed.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends seedCreateManyArgs>(args?: SelectSubset<T, seedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Seeds and returns the data saved in the database.
     * @param {seedCreateManyAndReturnArgs} args - Arguments to create many Seeds.
     * @example
     * // Create many Seeds
     * const seed = await prisma.seed.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Seeds and only return the `pl_name`
     * const seedWithPl_nameOnly = await prisma.seed.createManyAndReturn({ 
     *   select: { pl_name: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends seedCreateManyAndReturnArgs>(args?: SelectSubset<T, seedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$seedPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Seed.
     * @param {seedDeleteArgs} args - Arguments to delete one Seed.
     * @example
     * // Delete one Seed
     * const Seed = await prisma.seed.delete({
     *   where: {
     *     // ... filter to delete one Seed
     *   }
     * })
     * 
     */
    delete<T extends seedDeleteArgs>(args: SelectSubset<T, seedDeleteArgs<ExtArgs>>): Prisma__seedClient<$Result.GetResult<Prisma.$seedPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Seed.
     * @param {seedUpdateArgs} args - Arguments to update one Seed.
     * @example
     * // Update one Seed
     * const seed = await prisma.seed.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends seedUpdateArgs>(args: SelectSubset<T, seedUpdateArgs<ExtArgs>>): Prisma__seedClient<$Result.GetResult<Prisma.$seedPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Seeds.
     * @param {seedDeleteManyArgs} args - Arguments to filter Seeds to delete.
     * @example
     * // Delete a few Seeds
     * const { count } = await prisma.seed.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends seedDeleteManyArgs>(args?: SelectSubset<T, seedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seeds
     * const seed = await prisma.seed.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends seedUpdateManyArgs>(args: SelectSubset<T, seedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Seed.
     * @param {seedUpsertArgs} args - Arguments to update or create a Seed.
     * @example
     * // Update or create a Seed
     * const seed = await prisma.seed.upsert({
     *   create: {
     *     // ... data to create a Seed
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Seed we want to update
     *   }
     * })
     */
    upsert<T extends seedUpsertArgs>(args: SelectSubset<T, seedUpsertArgs<ExtArgs>>): Prisma__seedClient<$Result.GetResult<Prisma.$seedPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Seeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seedCountArgs} args - Arguments to filter Seeds to count.
     * @example
     * // Count the number of Seeds
     * const count = await prisma.seed.count({
     *   where: {
     *     // ... the filter for the Seeds we want to count
     *   }
     * })
    **/
    count<T extends seedCountArgs>(
      args?: Subset<T, seedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Seed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeedAggregateArgs>(args: Subset<T, SeedAggregateArgs>): Prisma.PrismaPromise<GetSeedAggregateType<T>>

    /**
     * Group by Seed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends seedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: seedGroupByArgs['orderBy'] }
        : { orderBy?: seedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, seedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the seed model
   */
  readonly fields: seedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for seed.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__seedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plant<T extends plantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, plantDefaultArgs<ExtArgs>>): Prisma__plantClient<$Result.GetResult<Prisma.$plantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    supplier<T extends supplierDefaultArgs<ExtArgs> = {}>(args?: Subset<T, supplierDefaultArgs<ExtArgs>>): Prisma__supplierClient<$Result.GetResult<Prisma.$supplierPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the seed model
   */ 
  interface seedFieldRefs {
    readonly pl_name: FieldRef<"seed", 'String'>
    readonly sid: FieldRef<"seed", 'Int'>
    readonly quantity: FieldRef<"seed", 'Int'>
    readonly price: FieldRef<"seed", 'Float'>
    readonly temp: FieldRef<"seed", 'Float'>
    readonly humidity: FieldRef<"seed", 'String'>
    readonly expiration_date: FieldRef<"seed", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * seed findUnique
   */
  export type seedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seed
     */
    select?: seedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seedInclude<ExtArgs> | null
    /**
     * Filter, which seed to fetch.
     */
    where: seedWhereUniqueInput
  }

  /**
   * seed findUniqueOrThrow
   */
  export type seedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seed
     */
    select?: seedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seedInclude<ExtArgs> | null
    /**
     * Filter, which seed to fetch.
     */
    where: seedWhereUniqueInput
  }

  /**
   * seed findFirst
   */
  export type seedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seed
     */
    select?: seedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seedInclude<ExtArgs> | null
    /**
     * Filter, which seed to fetch.
     */
    where?: seedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seeds to fetch.
     */
    orderBy?: seedOrderByWithRelationInput | seedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for seeds.
     */
    cursor?: seedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of seeds.
     */
    distinct?: SeedScalarFieldEnum | SeedScalarFieldEnum[]
  }

  /**
   * seed findFirstOrThrow
   */
  export type seedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seed
     */
    select?: seedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seedInclude<ExtArgs> | null
    /**
     * Filter, which seed to fetch.
     */
    where?: seedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seeds to fetch.
     */
    orderBy?: seedOrderByWithRelationInput | seedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for seeds.
     */
    cursor?: seedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of seeds.
     */
    distinct?: SeedScalarFieldEnum | SeedScalarFieldEnum[]
  }

  /**
   * seed findMany
   */
  export type seedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seed
     */
    select?: seedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seedInclude<ExtArgs> | null
    /**
     * Filter, which seeds to fetch.
     */
    where?: seedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seeds to fetch.
     */
    orderBy?: seedOrderByWithRelationInput | seedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing seeds.
     */
    cursor?: seedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seeds.
     */
    skip?: number
    distinct?: SeedScalarFieldEnum | SeedScalarFieldEnum[]
  }

  /**
   * seed create
   */
  export type seedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seed
     */
    select?: seedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seedInclude<ExtArgs> | null
    /**
     * The data needed to create a seed.
     */
    data: XOR<seedCreateInput, seedUncheckedCreateInput>
  }

  /**
   * seed createMany
   */
  export type seedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many seeds.
     */
    data: seedCreateManyInput | seedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * seed createManyAndReturn
   */
  export type seedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seed
     */
    select?: seedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many seeds.
     */
    data: seedCreateManyInput | seedCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seedIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * seed update
   */
  export type seedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seed
     */
    select?: seedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seedInclude<ExtArgs> | null
    /**
     * The data needed to update a seed.
     */
    data: XOR<seedUpdateInput, seedUncheckedUpdateInput>
    /**
     * Choose, which seed to update.
     */
    where: seedWhereUniqueInput
  }

  /**
   * seed updateMany
   */
  export type seedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update seeds.
     */
    data: XOR<seedUpdateManyMutationInput, seedUncheckedUpdateManyInput>
    /**
     * Filter which seeds to update
     */
    where?: seedWhereInput
  }

  /**
   * seed upsert
   */
  export type seedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seed
     */
    select?: seedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seedInclude<ExtArgs> | null
    /**
     * The filter to search for the seed to update in case it exists.
     */
    where: seedWhereUniqueInput
    /**
     * In case the seed found by the `where` argument doesn't exist, create a new seed with this data.
     */
    create: XOR<seedCreateInput, seedUncheckedCreateInput>
    /**
     * In case the seed was found with the provided `where` argument, update it with this data.
     */
    update: XOR<seedUpdateInput, seedUncheckedUpdateInput>
  }

  /**
   * seed delete
   */
  export type seedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seed
     */
    select?: seedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seedInclude<ExtArgs> | null
    /**
     * Filter which seed to delete.
     */
    where: seedWhereUniqueInput
  }

  /**
   * seed deleteMany
   */
  export type seedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which seeds to delete
     */
    where?: seedWhereInput
  }

  /**
   * seed without action
   */
  export type seedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seed
     */
    select?: seedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seedInclude<ExtArgs> | null
  }


  /**
   * Model supplier
   */

  export type AggregateSupplier = {
    _count: SupplierCountAggregateOutputType | null
    _avg: SupplierAvgAggregateOutputType | null
    _sum: SupplierSumAggregateOutputType | null
    _min: SupplierMinAggregateOutputType | null
    _max: SupplierMaxAggregateOutputType | null
  }

  export type SupplierAvgAggregateOutputType = {
    sid: number | null
    phone: number | null
  }

  export type SupplierSumAggregateOutputType = {
    sid: number | null
    phone: number | null
  }

  export type SupplierMinAggregateOutputType = {
    sid: number | null
    name: string | null
    phone: number | null
    email: string | null
    address: string | null
  }

  export type SupplierMaxAggregateOutputType = {
    sid: number | null
    name: string | null
    phone: number | null
    email: string | null
    address: string | null
  }

  export type SupplierCountAggregateOutputType = {
    sid: number
    name: number
    phone: number
    email: number
    address: number
    _all: number
  }


  export type SupplierAvgAggregateInputType = {
    sid?: true
    phone?: true
  }

  export type SupplierSumAggregateInputType = {
    sid?: true
    phone?: true
  }

  export type SupplierMinAggregateInputType = {
    sid?: true
    name?: true
    phone?: true
    email?: true
    address?: true
  }

  export type SupplierMaxAggregateInputType = {
    sid?: true
    name?: true
    phone?: true
    email?: true
    address?: true
  }

  export type SupplierCountAggregateInputType = {
    sid?: true
    name?: true
    phone?: true
    email?: true
    address?: true
    _all?: true
  }

  export type SupplierAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which supplier to aggregate.
     */
    where?: supplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of suppliers to fetch.
     */
    orderBy?: supplierOrderByWithRelationInput | supplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: supplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned suppliers
    **/
    _count?: true | SupplierCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SupplierAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SupplierSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SupplierMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SupplierMaxAggregateInputType
  }

  export type GetSupplierAggregateType<T extends SupplierAggregateArgs> = {
        [P in keyof T & keyof AggregateSupplier]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSupplier[P]>
      : GetScalarType<T[P], AggregateSupplier[P]>
  }




  export type supplierGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: supplierWhereInput
    orderBy?: supplierOrderByWithAggregationInput | supplierOrderByWithAggregationInput[]
    by: SupplierScalarFieldEnum[] | SupplierScalarFieldEnum
    having?: supplierScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SupplierCountAggregateInputType | true
    _avg?: SupplierAvgAggregateInputType
    _sum?: SupplierSumAggregateInputType
    _min?: SupplierMinAggregateInputType
    _max?: SupplierMaxAggregateInputType
  }

  export type SupplierGroupByOutputType = {
    sid: number
    name: string | null
    phone: number | null
    email: string | null
    address: string | null
    _count: SupplierCountAggregateOutputType | null
    _avg: SupplierAvgAggregateOutputType | null
    _sum: SupplierSumAggregateOutputType | null
    _min: SupplierMinAggregateOutputType | null
    _max: SupplierMaxAggregateOutputType | null
  }

  type GetSupplierGroupByPayload<T extends supplierGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SupplierGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SupplierGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SupplierGroupByOutputType[P]>
            : GetScalarType<T[P], SupplierGroupByOutputType[P]>
        }
      >
    >


  export type supplierSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sid?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
    seed?: boolean | supplier$seedArgs<ExtArgs>
    _count?: boolean | SupplierCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supplier"]>

  export type supplierSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sid?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
  }, ExtArgs["result"]["supplier"]>

  export type supplierSelectScalar = {
    sid?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
  }

  export type supplierInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seed?: boolean | supplier$seedArgs<ExtArgs>
    _count?: boolean | SupplierCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type supplierIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $supplierPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "supplier"
    objects: {
      seed: Prisma.$seedPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      sid: number
      name: string | null
      phone: number | null
      email: string | null
      address: string | null
    }, ExtArgs["result"]["supplier"]>
    composites: {}
  }

  type supplierGetPayload<S extends boolean | null | undefined | supplierDefaultArgs> = $Result.GetResult<Prisma.$supplierPayload, S>

  type supplierCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<supplierFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SupplierCountAggregateInputType | true
    }

  export interface supplierDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['supplier'], meta: { name: 'supplier' } }
    /**
     * Find zero or one Supplier that matches the filter.
     * @param {supplierFindUniqueArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends supplierFindUniqueArgs>(args: SelectSubset<T, supplierFindUniqueArgs<ExtArgs>>): Prisma__supplierClient<$Result.GetResult<Prisma.$supplierPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Supplier that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {supplierFindUniqueOrThrowArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends supplierFindUniqueOrThrowArgs>(args: SelectSubset<T, supplierFindUniqueOrThrowArgs<ExtArgs>>): Prisma__supplierClient<$Result.GetResult<Prisma.$supplierPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Supplier that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {supplierFindFirstArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends supplierFindFirstArgs>(args?: SelectSubset<T, supplierFindFirstArgs<ExtArgs>>): Prisma__supplierClient<$Result.GetResult<Prisma.$supplierPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Supplier that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {supplierFindFirstOrThrowArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends supplierFindFirstOrThrowArgs>(args?: SelectSubset<T, supplierFindFirstOrThrowArgs<ExtArgs>>): Prisma__supplierClient<$Result.GetResult<Prisma.$supplierPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Suppliers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {supplierFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Suppliers
     * const suppliers = await prisma.supplier.findMany()
     * 
     * // Get first 10 Suppliers
     * const suppliers = await prisma.supplier.findMany({ take: 10 })
     * 
     * // Only select the `sid`
     * const supplierWithSidOnly = await prisma.supplier.findMany({ select: { sid: true } })
     * 
     */
    findMany<T extends supplierFindManyArgs>(args?: SelectSubset<T, supplierFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$supplierPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Supplier.
     * @param {supplierCreateArgs} args - Arguments to create a Supplier.
     * @example
     * // Create one Supplier
     * const Supplier = await prisma.supplier.create({
     *   data: {
     *     // ... data to create a Supplier
     *   }
     * })
     * 
     */
    create<T extends supplierCreateArgs>(args: SelectSubset<T, supplierCreateArgs<ExtArgs>>): Prisma__supplierClient<$Result.GetResult<Prisma.$supplierPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Suppliers.
     * @param {supplierCreateManyArgs} args - Arguments to create many Suppliers.
     * @example
     * // Create many Suppliers
     * const supplier = await prisma.supplier.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends supplierCreateManyArgs>(args?: SelectSubset<T, supplierCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Suppliers and returns the data saved in the database.
     * @param {supplierCreateManyAndReturnArgs} args - Arguments to create many Suppliers.
     * @example
     * // Create many Suppliers
     * const supplier = await prisma.supplier.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Suppliers and only return the `sid`
     * const supplierWithSidOnly = await prisma.supplier.createManyAndReturn({ 
     *   select: { sid: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends supplierCreateManyAndReturnArgs>(args?: SelectSubset<T, supplierCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$supplierPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Supplier.
     * @param {supplierDeleteArgs} args - Arguments to delete one Supplier.
     * @example
     * // Delete one Supplier
     * const Supplier = await prisma.supplier.delete({
     *   where: {
     *     // ... filter to delete one Supplier
     *   }
     * })
     * 
     */
    delete<T extends supplierDeleteArgs>(args: SelectSubset<T, supplierDeleteArgs<ExtArgs>>): Prisma__supplierClient<$Result.GetResult<Prisma.$supplierPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Supplier.
     * @param {supplierUpdateArgs} args - Arguments to update one Supplier.
     * @example
     * // Update one Supplier
     * const supplier = await prisma.supplier.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends supplierUpdateArgs>(args: SelectSubset<T, supplierUpdateArgs<ExtArgs>>): Prisma__supplierClient<$Result.GetResult<Prisma.$supplierPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Suppliers.
     * @param {supplierDeleteManyArgs} args - Arguments to filter Suppliers to delete.
     * @example
     * // Delete a few Suppliers
     * const { count } = await prisma.supplier.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends supplierDeleteManyArgs>(args?: SelectSubset<T, supplierDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {supplierUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Suppliers
     * const supplier = await prisma.supplier.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends supplierUpdateManyArgs>(args: SelectSubset<T, supplierUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Supplier.
     * @param {supplierUpsertArgs} args - Arguments to update or create a Supplier.
     * @example
     * // Update or create a Supplier
     * const supplier = await prisma.supplier.upsert({
     *   create: {
     *     // ... data to create a Supplier
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Supplier we want to update
     *   }
     * })
     */
    upsert<T extends supplierUpsertArgs>(args: SelectSubset<T, supplierUpsertArgs<ExtArgs>>): Prisma__supplierClient<$Result.GetResult<Prisma.$supplierPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {supplierCountArgs} args - Arguments to filter Suppliers to count.
     * @example
     * // Count the number of Suppliers
     * const count = await prisma.supplier.count({
     *   where: {
     *     // ... the filter for the Suppliers we want to count
     *   }
     * })
    **/
    count<T extends supplierCountArgs>(
      args?: Subset<T, supplierCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SupplierCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Supplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SupplierAggregateArgs>(args: Subset<T, SupplierAggregateArgs>): Prisma.PrismaPromise<GetSupplierAggregateType<T>>

    /**
     * Group by Supplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {supplierGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends supplierGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: supplierGroupByArgs['orderBy'] }
        : { orderBy?: supplierGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, supplierGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSupplierGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the supplier model
   */
  readonly fields: supplierFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for supplier.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__supplierClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    seed<T extends supplier$seedArgs<ExtArgs> = {}>(args?: Subset<T, supplier$seedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$seedPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the supplier model
   */ 
  interface supplierFieldRefs {
    readonly sid: FieldRef<"supplier", 'Int'>
    readonly name: FieldRef<"supplier", 'String'>
    readonly phone: FieldRef<"supplier", 'Int'>
    readonly email: FieldRef<"supplier", 'String'>
    readonly address: FieldRef<"supplier", 'String'>
  }
    

  // Custom InputTypes
  /**
   * supplier findUnique
   */
  export type supplierFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supplier
     */
    select?: supplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supplierInclude<ExtArgs> | null
    /**
     * Filter, which supplier to fetch.
     */
    where: supplierWhereUniqueInput
  }

  /**
   * supplier findUniqueOrThrow
   */
  export type supplierFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supplier
     */
    select?: supplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supplierInclude<ExtArgs> | null
    /**
     * Filter, which supplier to fetch.
     */
    where: supplierWhereUniqueInput
  }

  /**
   * supplier findFirst
   */
  export type supplierFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supplier
     */
    select?: supplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supplierInclude<ExtArgs> | null
    /**
     * Filter, which supplier to fetch.
     */
    where?: supplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of suppliers to fetch.
     */
    orderBy?: supplierOrderByWithRelationInput | supplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for suppliers.
     */
    cursor?: supplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of suppliers.
     */
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }

  /**
   * supplier findFirstOrThrow
   */
  export type supplierFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supplier
     */
    select?: supplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supplierInclude<ExtArgs> | null
    /**
     * Filter, which supplier to fetch.
     */
    where?: supplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of suppliers to fetch.
     */
    orderBy?: supplierOrderByWithRelationInput | supplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for suppliers.
     */
    cursor?: supplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of suppliers.
     */
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }

  /**
   * supplier findMany
   */
  export type supplierFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supplier
     */
    select?: supplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supplierInclude<ExtArgs> | null
    /**
     * Filter, which suppliers to fetch.
     */
    where?: supplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of suppliers to fetch.
     */
    orderBy?: supplierOrderByWithRelationInput | supplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing suppliers.
     */
    cursor?: supplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` suppliers.
     */
    skip?: number
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }

  /**
   * supplier create
   */
  export type supplierCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supplier
     */
    select?: supplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supplierInclude<ExtArgs> | null
    /**
     * The data needed to create a supplier.
     */
    data: XOR<supplierCreateInput, supplierUncheckedCreateInput>
  }

  /**
   * supplier createMany
   */
  export type supplierCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many suppliers.
     */
    data: supplierCreateManyInput | supplierCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * supplier createManyAndReturn
   */
  export type supplierCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supplier
     */
    select?: supplierSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many suppliers.
     */
    data: supplierCreateManyInput | supplierCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * supplier update
   */
  export type supplierUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supplier
     */
    select?: supplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supplierInclude<ExtArgs> | null
    /**
     * The data needed to update a supplier.
     */
    data: XOR<supplierUpdateInput, supplierUncheckedUpdateInput>
    /**
     * Choose, which supplier to update.
     */
    where: supplierWhereUniqueInput
  }

  /**
   * supplier updateMany
   */
  export type supplierUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update suppliers.
     */
    data: XOR<supplierUpdateManyMutationInput, supplierUncheckedUpdateManyInput>
    /**
     * Filter which suppliers to update
     */
    where?: supplierWhereInput
  }

  /**
   * supplier upsert
   */
  export type supplierUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supplier
     */
    select?: supplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supplierInclude<ExtArgs> | null
    /**
     * The filter to search for the supplier to update in case it exists.
     */
    where: supplierWhereUniqueInput
    /**
     * In case the supplier found by the `where` argument doesn't exist, create a new supplier with this data.
     */
    create: XOR<supplierCreateInput, supplierUncheckedCreateInput>
    /**
     * In case the supplier was found with the provided `where` argument, update it with this data.
     */
    update: XOR<supplierUpdateInput, supplierUncheckedUpdateInput>
  }

  /**
   * supplier delete
   */
  export type supplierDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supplier
     */
    select?: supplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supplierInclude<ExtArgs> | null
    /**
     * Filter which supplier to delete.
     */
    where: supplierWhereUniqueInput
  }

  /**
   * supplier deleteMany
   */
  export type supplierDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which suppliers to delete
     */
    where?: supplierWhereInput
  }

  /**
   * supplier.seed
   */
  export type supplier$seedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the seed
     */
    select?: seedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: seedInclude<ExtArgs> | null
    where?: seedWhereInput
    orderBy?: seedOrderByWithRelationInput | seedOrderByWithRelationInput[]
    cursor?: seedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeedScalarFieldEnum | SeedScalarFieldEnum[]
  }

  /**
   * supplier without action
   */
  export type supplierDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the supplier
     */
    select?: supplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: supplierInclude<ExtArgs> | null
  }


  /**
   * Model adminuser
   */

  export type AggregateAdminuser = {
    _count: AdminuserCountAggregateOutputType | null
    _avg: AdminuserAvgAggregateOutputType | null
    _sum: AdminuserSumAggregateOutputType | null
    _min: AdminuserMinAggregateOutputType | null
    _max: AdminuserMaxAggregateOutputType | null
  }

  export type AdminuserAvgAggregateOutputType = {
    id: number | null
  }

  export type AdminuserSumAggregateOutputType = {
    id: number | null
  }

  export type AdminuserMinAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    hashedpassword: string | null
  }

  export type AdminuserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    hashedpassword: string | null
  }

  export type AdminuserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    hashedpassword: number
    _all: number
  }


  export type AdminuserAvgAggregateInputType = {
    id?: true
  }

  export type AdminuserSumAggregateInputType = {
    id?: true
  }

  export type AdminuserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    hashedpassword?: true
  }

  export type AdminuserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    hashedpassword?: true
  }

  export type AdminuserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    hashedpassword?: true
    _all?: true
  }

  export type AdminuserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which adminuser to aggregate.
     */
    where?: adminuserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adminusers to fetch.
     */
    orderBy?: adminuserOrderByWithRelationInput | adminuserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: adminuserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adminusers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adminusers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned adminusers
    **/
    _count?: true | AdminuserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminuserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminuserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminuserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminuserMaxAggregateInputType
  }

  export type GetAdminuserAggregateType<T extends AdminuserAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminuser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminuser[P]>
      : GetScalarType<T[P], AggregateAdminuser[P]>
  }




  export type adminuserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: adminuserWhereInput
    orderBy?: adminuserOrderByWithAggregationInput | adminuserOrderByWithAggregationInput[]
    by: AdminuserScalarFieldEnum[] | AdminuserScalarFieldEnum
    having?: adminuserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminuserCountAggregateInputType | true
    _avg?: AdminuserAvgAggregateInputType
    _sum?: AdminuserSumAggregateInputType
    _min?: AdminuserMinAggregateInputType
    _max?: AdminuserMaxAggregateInputType
  }

  export type AdminuserGroupByOutputType = {
    id: number
    username: string | null
    email: string | null
    hashedpassword: string | null
    _count: AdminuserCountAggregateOutputType | null
    _avg: AdminuserAvgAggregateOutputType | null
    _sum: AdminuserSumAggregateOutputType | null
    _min: AdminuserMinAggregateOutputType | null
    _max: AdminuserMaxAggregateOutputType | null
  }

  type GetAdminuserGroupByPayload<T extends adminuserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminuserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminuserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminuserGroupByOutputType[P]>
            : GetScalarType<T[P], AdminuserGroupByOutputType[P]>
        }
      >
    >


  export type adminuserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    hashedpassword?: boolean
  }, ExtArgs["result"]["adminuser"]>

  export type adminuserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    hashedpassword?: boolean
  }, ExtArgs["result"]["adminuser"]>

  export type adminuserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    hashedpassword?: boolean
  }


  export type $adminuserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "adminuser"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string | null
      email: string | null
      hashedpassword: string | null
    }, ExtArgs["result"]["adminuser"]>
    composites: {}
  }

  type adminuserGetPayload<S extends boolean | null | undefined | adminuserDefaultArgs> = $Result.GetResult<Prisma.$adminuserPayload, S>

  type adminuserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<adminuserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminuserCountAggregateInputType | true
    }

  export interface adminuserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['adminuser'], meta: { name: 'adminuser' } }
    /**
     * Find zero or one Adminuser that matches the filter.
     * @param {adminuserFindUniqueArgs} args - Arguments to find a Adminuser
     * @example
     * // Get one Adminuser
     * const adminuser = await prisma.adminuser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends adminuserFindUniqueArgs>(args: SelectSubset<T, adminuserFindUniqueArgs<ExtArgs>>): Prisma__adminuserClient<$Result.GetResult<Prisma.$adminuserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Adminuser that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {adminuserFindUniqueOrThrowArgs} args - Arguments to find a Adminuser
     * @example
     * // Get one Adminuser
     * const adminuser = await prisma.adminuser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends adminuserFindUniqueOrThrowArgs>(args: SelectSubset<T, adminuserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__adminuserClient<$Result.GetResult<Prisma.$adminuserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Adminuser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminuserFindFirstArgs} args - Arguments to find a Adminuser
     * @example
     * // Get one Adminuser
     * const adminuser = await prisma.adminuser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends adminuserFindFirstArgs>(args?: SelectSubset<T, adminuserFindFirstArgs<ExtArgs>>): Prisma__adminuserClient<$Result.GetResult<Prisma.$adminuserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Adminuser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminuserFindFirstOrThrowArgs} args - Arguments to find a Adminuser
     * @example
     * // Get one Adminuser
     * const adminuser = await prisma.adminuser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends adminuserFindFirstOrThrowArgs>(args?: SelectSubset<T, adminuserFindFirstOrThrowArgs<ExtArgs>>): Prisma__adminuserClient<$Result.GetResult<Prisma.$adminuserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Adminusers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminuserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Adminusers
     * const adminusers = await prisma.adminuser.findMany()
     * 
     * // Get first 10 Adminusers
     * const adminusers = await prisma.adminuser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminuserWithIdOnly = await prisma.adminuser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends adminuserFindManyArgs>(args?: SelectSubset<T, adminuserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adminuserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Adminuser.
     * @param {adminuserCreateArgs} args - Arguments to create a Adminuser.
     * @example
     * // Create one Adminuser
     * const Adminuser = await prisma.adminuser.create({
     *   data: {
     *     // ... data to create a Adminuser
     *   }
     * })
     * 
     */
    create<T extends adminuserCreateArgs>(args: SelectSubset<T, adminuserCreateArgs<ExtArgs>>): Prisma__adminuserClient<$Result.GetResult<Prisma.$adminuserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Adminusers.
     * @param {adminuserCreateManyArgs} args - Arguments to create many Adminusers.
     * @example
     * // Create many Adminusers
     * const adminuser = await prisma.adminuser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends adminuserCreateManyArgs>(args?: SelectSubset<T, adminuserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Adminusers and returns the data saved in the database.
     * @param {adminuserCreateManyAndReturnArgs} args - Arguments to create many Adminusers.
     * @example
     * // Create many Adminusers
     * const adminuser = await prisma.adminuser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Adminusers and only return the `id`
     * const adminuserWithIdOnly = await prisma.adminuser.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends adminuserCreateManyAndReturnArgs>(args?: SelectSubset<T, adminuserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adminuserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Adminuser.
     * @param {adminuserDeleteArgs} args - Arguments to delete one Adminuser.
     * @example
     * // Delete one Adminuser
     * const Adminuser = await prisma.adminuser.delete({
     *   where: {
     *     // ... filter to delete one Adminuser
     *   }
     * })
     * 
     */
    delete<T extends adminuserDeleteArgs>(args: SelectSubset<T, adminuserDeleteArgs<ExtArgs>>): Prisma__adminuserClient<$Result.GetResult<Prisma.$adminuserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Adminuser.
     * @param {adminuserUpdateArgs} args - Arguments to update one Adminuser.
     * @example
     * // Update one Adminuser
     * const adminuser = await prisma.adminuser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends adminuserUpdateArgs>(args: SelectSubset<T, adminuserUpdateArgs<ExtArgs>>): Prisma__adminuserClient<$Result.GetResult<Prisma.$adminuserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Adminusers.
     * @param {adminuserDeleteManyArgs} args - Arguments to filter Adminusers to delete.
     * @example
     * // Delete a few Adminusers
     * const { count } = await prisma.adminuser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends adminuserDeleteManyArgs>(args?: SelectSubset<T, adminuserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Adminusers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminuserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Adminusers
     * const adminuser = await prisma.adminuser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends adminuserUpdateManyArgs>(args: SelectSubset<T, adminuserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Adminuser.
     * @param {adminuserUpsertArgs} args - Arguments to update or create a Adminuser.
     * @example
     * // Update or create a Adminuser
     * const adminuser = await prisma.adminuser.upsert({
     *   create: {
     *     // ... data to create a Adminuser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Adminuser we want to update
     *   }
     * })
     */
    upsert<T extends adminuserUpsertArgs>(args: SelectSubset<T, adminuserUpsertArgs<ExtArgs>>): Prisma__adminuserClient<$Result.GetResult<Prisma.$adminuserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Adminusers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminuserCountArgs} args - Arguments to filter Adminusers to count.
     * @example
     * // Count the number of Adminusers
     * const count = await prisma.adminuser.count({
     *   where: {
     *     // ... the filter for the Adminusers we want to count
     *   }
     * })
    **/
    count<T extends adminuserCountArgs>(
      args?: Subset<T, adminuserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminuserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Adminuser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminuserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminuserAggregateArgs>(args: Subset<T, AdminuserAggregateArgs>): Prisma.PrismaPromise<GetAdminuserAggregateType<T>>

    /**
     * Group by Adminuser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminuserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends adminuserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: adminuserGroupByArgs['orderBy'] }
        : { orderBy?: adminuserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, adminuserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminuserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the adminuser model
   */
  readonly fields: adminuserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for adminuser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__adminuserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the adminuser model
   */ 
  interface adminuserFieldRefs {
    readonly id: FieldRef<"adminuser", 'Int'>
    readonly username: FieldRef<"adminuser", 'String'>
    readonly email: FieldRef<"adminuser", 'String'>
    readonly hashedpassword: FieldRef<"adminuser", 'String'>
  }
    

  // Custom InputTypes
  /**
   * adminuser findUnique
   */
  export type adminuserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adminuser
     */
    select?: adminuserSelect<ExtArgs> | null
    /**
     * Filter, which adminuser to fetch.
     */
    where: adminuserWhereUniqueInput
  }

  /**
   * adminuser findUniqueOrThrow
   */
  export type adminuserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adminuser
     */
    select?: adminuserSelect<ExtArgs> | null
    /**
     * Filter, which adminuser to fetch.
     */
    where: adminuserWhereUniqueInput
  }

  /**
   * adminuser findFirst
   */
  export type adminuserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adminuser
     */
    select?: adminuserSelect<ExtArgs> | null
    /**
     * Filter, which adminuser to fetch.
     */
    where?: adminuserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adminusers to fetch.
     */
    orderBy?: adminuserOrderByWithRelationInput | adminuserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for adminusers.
     */
    cursor?: adminuserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adminusers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adminusers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of adminusers.
     */
    distinct?: AdminuserScalarFieldEnum | AdminuserScalarFieldEnum[]
  }

  /**
   * adminuser findFirstOrThrow
   */
  export type adminuserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adminuser
     */
    select?: adminuserSelect<ExtArgs> | null
    /**
     * Filter, which adminuser to fetch.
     */
    where?: adminuserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adminusers to fetch.
     */
    orderBy?: adminuserOrderByWithRelationInput | adminuserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for adminusers.
     */
    cursor?: adminuserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adminusers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adminusers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of adminusers.
     */
    distinct?: AdminuserScalarFieldEnum | AdminuserScalarFieldEnum[]
  }

  /**
   * adminuser findMany
   */
  export type adminuserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adminuser
     */
    select?: adminuserSelect<ExtArgs> | null
    /**
     * Filter, which adminusers to fetch.
     */
    where?: adminuserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adminusers to fetch.
     */
    orderBy?: adminuserOrderByWithRelationInput | adminuserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing adminusers.
     */
    cursor?: adminuserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adminusers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adminusers.
     */
    skip?: number
    distinct?: AdminuserScalarFieldEnum | AdminuserScalarFieldEnum[]
  }

  /**
   * adminuser create
   */
  export type adminuserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adminuser
     */
    select?: adminuserSelect<ExtArgs> | null
    /**
     * The data needed to create a adminuser.
     */
    data?: XOR<adminuserCreateInput, adminuserUncheckedCreateInput>
  }

  /**
   * adminuser createMany
   */
  export type adminuserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many adminusers.
     */
    data: adminuserCreateManyInput | adminuserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * adminuser createManyAndReturn
   */
  export type adminuserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adminuser
     */
    select?: adminuserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many adminusers.
     */
    data: adminuserCreateManyInput | adminuserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * adminuser update
   */
  export type adminuserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adminuser
     */
    select?: adminuserSelect<ExtArgs> | null
    /**
     * The data needed to update a adminuser.
     */
    data: XOR<adminuserUpdateInput, adminuserUncheckedUpdateInput>
    /**
     * Choose, which adminuser to update.
     */
    where: adminuserWhereUniqueInput
  }

  /**
   * adminuser updateMany
   */
  export type adminuserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update adminusers.
     */
    data: XOR<adminuserUpdateManyMutationInput, adminuserUncheckedUpdateManyInput>
    /**
     * Filter which adminusers to update
     */
    where?: adminuserWhereInput
  }

  /**
   * adminuser upsert
   */
  export type adminuserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adminuser
     */
    select?: adminuserSelect<ExtArgs> | null
    /**
     * The filter to search for the adminuser to update in case it exists.
     */
    where: adminuserWhereUniqueInput
    /**
     * In case the adminuser found by the `where` argument doesn't exist, create a new adminuser with this data.
     */
    create: XOR<adminuserCreateInput, adminuserUncheckedCreateInput>
    /**
     * In case the adminuser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<adminuserUpdateInput, adminuserUncheckedUpdateInput>
  }

  /**
   * adminuser delete
   */
  export type adminuserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adminuser
     */
    select?: adminuserSelect<ExtArgs> | null
    /**
     * Filter which adminuser to delete.
     */
    where: adminuserWhereUniqueInput
  }

  /**
   * adminuser deleteMany
   */
  export type adminuserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which adminusers to delete
     */
    where?: adminuserWhereInput
  }

  /**
   * adminuser without action
   */
  export type adminuserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adminuser
     */
    select?: adminuserSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CustomerScalarFieldEnum: {
    cid: 'cid',
    name: 'name',
    phone: 'phone',
    email: 'email',
    age: 'age'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const NurseplantScalarFieldEnum: {
    name: 'name',
    batch_no: 'batch_no',
    loc: 'loc',
    stock: 'stock'
  };

  export type NurseplantScalarFieldEnum = (typeof NurseplantScalarFieldEnum)[keyof typeof NurseplantScalarFieldEnum]


  export const PlantScalarFieldEnum: {
    name: 'name',
    water: 'water',
    sunlight: 'sunlight',
    lifespan: 'lifespan',
    height: 'height',
    fruit_nut: 'fruit_nut',
    soil_ph: 'soil_ph',
    temperature: 'temperature',
    fertilizer: 'fertilizer',
    pest: 'pest',
    comp_plants: 'comp_plants'
  };

  export type PlantScalarFieldEnum = (typeof PlantScalarFieldEnum)[keyof typeof PlantScalarFieldEnum]


  export const PricingScalarFieldEnum: {
    id: 'id',
    pl_name: 'pl_name',
    batch_no: 'batch_no',
    units: 'units',
    unit_price: 'unit_price',
    total_price: 'total_price',
    tax: 'tax'
  };

  export type PricingScalarFieldEnum = (typeof PricingScalarFieldEnum)[keyof typeof PricingScalarFieldEnum]


  export const SeedScalarFieldEnum: {
    pl_name: 'pl_name',
    sid: 'sid',
    quantity: 'quantity',
    price: 'price',
    temp: 'temp',
    humidity: 'humidity',
    expiration_date: 'expiration_date'
  };

  export type SeedScalarFieldEnum = (typeof SeedScalarFieldEnum)[keyof typeof SeedScalarFieldEnum]


  export const SupplierScalarFieldEnum: {
    sid: 'sid',
    name: 'name',
    phone: 'phone',
    email: 'email',
    address: 'address'
  };

  export type SupplierScalarFieldEnum = (typeof SupplierScalarFieldEnum)[keyof typeof SupplierScalarFieldEnum]


  export const AdminuserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    hashedpassword: 'hashedpassword'
  };

  export type AdminuserScalarFieldEnum = (typeof AdminuserScalarFieldEnum)[keyof typeof AdminuserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type customerWhereInput = {
    AND?: customerWhereInput | customerWhereInput[]
    OR?: customerWhereInput[]
    NOT?: customerWhereInput | customerWhereInput[]
    cid?: IntFilter<"customer"> | number
    name?: StringNullableFilter<"customer"> | string | null
    phone?: IntNullableFilter<"customer"> | number | null
    email?: StringNullableFilter<"customer"> | string | null
    age?: IntNullableFilter<"customer"> | number | null
  }

  export type customerOrderByWithRelationInput = {
    cid?: SortOrder
    name?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
  }

  export type customerWhereUniqueInput = Prisma.AtLeast<{
    cid?: number
    AND?: customerWhereInput | customerWhereInput[]
    OR?: customerWhereInput[]
    NOT?: customerWhereInput | customerWhereInput[]
    name?: StringNullableFilter<"customer"> | string | null
    phone?: IntNullableFilter<"customer"> | number | null
    email?: StringNullableFilter<"customer"> | string | null
    age?: IntNullableFilter<"customer"> | number | null
  }, "cid">

  export type customerOrderByWithAggregationInput = {
    cid?: SortOrder
    name?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    _count?: customerCountOrderByAggregateInput
    _avg?: customerAvgOrderByAggregateInput
    _max?: customerMaxOrderByAggregateInput
    _min?: customerMinOrderByAggregateInput
    _sum?: customerSumOrderByAggregateInput
  }

  export type customerScalarWhereWithAggregatesInput = {
    AND?: customerScalarWhereWithAggregatesInput | customerScalarWhereWithAggregatesInput[]
    OR?: customerScalarWhereWithAggregatesInput[]
    NOT?: customerScalarWhereWithAggregatesInput | customerScalarWhereWithAggregatesInput[]
    cid?: IntWithAggregatesFilter<"customer"> | number
    name?: StringNullableWithAggregatesFilter<"customer"> | string | null
    phone?: IntNullableWithAggregatesFilter<"customer"> | number | null
    email?: StringNullableWithAggregatesFilter<"customer"> | string | null
    age?: IntNullableWithAggregatesFilter<"customer"> | number | null
  }

  export type nurseplantWhereInput = {
    AND?: nurseplantWhereInput | nurseplantWhereInput[]
    OR?: nurseplantWhereInput[]
    NOT?: nurseplantWhereInput | nurseplantWhereInput[]
    name?: StringFilter<"nurseplant"> | string
    batch_no?: IntFilter<"nurseplant"> | number
    loc?: StringNullableFilter<"nurseplant"> | string | null
    stock?: IntNullableFilter<"nurseplant"> | number | null
    plant?: XOR<PlantRelationFilter, plantWhereInput>
  }

  export type nurseplantOrderByWithRelationInput = {
    name?: SortOrder
    batch_no?: SortOrder
    loc?: SortOrderInput | SortOrder
    stock?: SortOrderInput | SortOrder
    plant?: plantOrderByWithRelationInput
  }

  export type nurseplantWhereUniqueInput = Prisma.AtLeast<{
    name_batch_no?: nurseplantNameBatch_noCompoundUniqueInput
    AND?: nurseplantWhereInput | nurseplantWhereInput[]
    OR?: nurseplantWhereInput[]
    NOT?: nurseplantWhereInput | nurseplantWhereInput[]
    name?: StringFilter<"nurseplant"> | string
    batch_no?: IntFilter<"nurseplant"> | number
    loc?: StringNullableFilter<"nurseplant"> | string | null
    stock?: IntNullableFilter<"nurseplant"> | number | null
    plant?: XOR<PlantRelationFilter, plantWhereInput>
  }, "name_batch_no">

  export type nurseplantOrderByWithAggregationInput = {
    name?: SortOrder
    batch_no?: SortOrder
    loc?: SortOrderInput | SortOrder
    stock?: SortOrderInput | SortOrder
    _count?: nurseplantCountOrderByAggregateInput
    _avg?: nurseplantAvgOrderByAggregateInput
    _max?: nurseplantMaxOrderByAggregateInput
    _min?: nurseplantMinOrderByAggregateInput
    _sum?: nurseplantSumOrderByAggregateInput
  }

  export type nurseplantScalarWhereWithAggregatesInput = {
    AND?: nurseplantScalarWhereWithAggregatesInput | nurseplantScalarWhereWithAggregatesInput[]
    OR?: nurseplantScalarWhereWithAggregatesInput[]
    NOT?: nurseplantScalarWhereWithAggregatesInput | nurseplantScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"nurseplant"> | string
    batch_no?: IntWithAggregatesFilter<"nurseplant"> | number
    loc?: StringNullableWithAggregatesFilter<"nurseplant"> | string | null
    stock?: IntNullableWithAggregatesFilter<"nurseplant"> | number | null
  }

  export type plantWhereInput = {
    AND?: plantWhereInput | plantWhereInput[]
    OR?: plantWhereInput[]
    NOT?: plantWhereInput | plantWhereInput[]
    name?: StringFilter<"plant"> | string
    water?: StringNullableFilter<"plant"> | string | null
    sunlight?: StringNullableFilter<"plant"> | string | null
    lifespan?: IntNullableFilter<"plant"> | number | null
    height?: FloatNullableFilter<"plant"> | number | null
    fruit_nut?: StringNullableFilter<"plant"> | string | null
    soil_ph?: FloatNullableFilter<"plant"> | number | null
    temperature?: FloatNullableFilter<"plant"> | number | null
    fertilizer?: StringNullableFilter<"plant"> | string | null
    pest?: StringNullableFilter<"plant"> | string | null
    comp_plants?: StringNullableFilter<"plant"> | string | null
    nurseplant?: NurseplantListRelationFilter
    pricing?: PricingListRelationFilter
    seed?: SeedListRelationFilter
  }

  export type plantOrderByWithRelationInput = {
    name?: SortOrder
    water?: SortOrderInput | SortOrder
    sunlight?: SortOrderInput | SortOrder
    lifespan?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    fruit_nut?: SortOrderInput | SortOrder
    soil_ph?: SortOrderInput | SortOrder
    temperature?: SortOrderInput | SortOrder
    fertilizer?: SortOrderInput | SortOrder
    pest?: SortOrderInput | SortOrder
    comp_plants?: SortOrderInput | SortOrder
    nurseplant?: nurseplantOrderByRelationAggregateInput
    pricing?: pricingOrderByRelationAggregateInput
    seed?: seedOrderByRelationAggregateInput
  }

  export type plantWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: plantWhereInput | plantWhereInput[]
    OR?: plantWhereInput[]
    NOT?: plantWhereInput | plantWhereInput[]
    water?: StringNullableFilter<"plant"> | string | null
    sunlight?: StringNullableFilter<"plant"> | string | null
    lifespan?: IntNullableFilter<"plant"> | number | null
    height?: FloatNullableFilter<"plant"> | number | null
    fruit_nut?: StringNullableFilter<"plant"> | string | null
    soil_ph?: FloatNullableFilter<"plant"> | number | null
    temperature?: FloatNullableFilter<"plant"> | number | null
    fertilizer?: StringNullableFilter<"plant"> | string | null
    pest?: StringNullableFilter<"plant"> | string | null
    comp_plants?: StringNullableFilter<"plant"> | string | null
    nurseplant?: NurseplantListRelationFilter
    pricing?: PricingListRelationFilter
    seed?: SeedListRelationFilter
  }, "name">

  export type plantOrderByWithAggregationInput = {
    name?: SortOrder
    water?: SortOrderInput | SortOrder
    sunlight?: SortOrderInput | SortOrder
    lifespan?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    fruit_nut?: SortOrderInput | SortOrder
    soil_ph?: SortOrderInput | SortOrder
    temperature?: SortOrderInput | SortOrder
    fertilizer?: SortOrderInput | SortOrder
    pest?: SortOrderInput | SortOrder
    comp_plants?: SortOrderInput | SortOrder
    _count?: plantCountOrderByAggregateInput
    _avg?: plantAvgOrderByAggregateInput
    _max?: plantMaxOrderByAggregateInput
    _min?: plantMinOrderByAggregateInput
    _sum?: plantSumOrderByAggregateInput
  }

  export type plantScalarWhereWithAggregatesInput = {
    AND?: plantScalarWhereWithAggregatesInput | plantScalarWhereWithAggregatesInput[]
    OR?: plantScalarWhereWithAggregatesInput[]
    NOT?: plantScalarWhereWithAggregatesInput | plantScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"plant"> | string
    water?: StringNullableWithAggregatesFilter<"plant"> | string | null
    sunlight?: StringNullableWithAggregatesFilter<"plant"> | string | null
    lifespan?: IntNullableWithAggregatesFilter<"plant"> | number | null
    height?: FloatNullableWithAggregatesFilter<"plant"> | number | null
    fruit_nut?: StringNullableWithAggregatesFilter<"plant"> | string | null
    soil_ph?: FloatNullableWithAggregatesFilter<"plant"> | number | null
    temperature?: FloatNullableWithAggregatesFilter<"plant"> | number | null
    fertilizer?: StringNullableWithAggregatesFilter<"plant"> | string | null
    pest?: StringNullableWithAggregatesFilter<"plant"> | string | null
    comp_plants?: StringNullableWithAggregatesFilter<"plant"> | string | null
  }

  export type pricingWhereInput = {
    AND?: pricingWhereInput | pricingWhereInput[]
    OR?: pricingWhereInput[]
    NOT?: pricingWhereInput | pricingWhereInput[]
    id?: IntFilter<"pricing"> | number
    pl_name?: StringFilter<"pricing"> | string
    batch_no?: IntFilter<"pricing"> | number
    units?: IntNullableFilter<"pricing"> | number | null
    unit_price?: FloatNullableFilter<"pricing"> | number | null
    total_price?: FloatNullableFilter<"pricing"> | number | null
    tax?: FloatNullableFilter<"pricing"> | number | null
    plant?: XOR<PlantRelationFilter, plantWhereInput>
  }

  export type pricingOrderByWithRelationInput = {
    id?: SortOrder
    pl_name?: SortOrder
    batch_no?: SortOrder
    units?: SortOrderInput | SortOrder
    unit_price?: SortOrderInput | SortOrder
    total_price?: SortOrderInput | SortOrder
    tax?: SortOrderInput | SortOrder
    plant?: plantOrderByWithRelationInput
  }

  export type pricingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: pricingWhereInput | pricingWhereInput[]
    OR?: pricingWhereInput[]
    NOT?: pricingWhereInput | pricingWhereInput[]
    pl_name?: StringFilter<"pricing"> | string
    batch_no?: IntFilter<"pricing"> | number
    units?: IntNullableFilter<"pricing"> | number | null
    unit_price?: FloatNullableFilter<"pricing"> | number | null
    total_price?: FloatNullableFilter<"pricing"> | number | null
    tax?: FloatNullableFilter<"pricing"> | number | null
    plant?: XOR<PlantRelationFilter, plantWhereInput>
  }, "id">

  export type pricingOrderByWithAggregationInput = {
    id?: SortOrder
    pl_name?: SortOrder
    batch_no?: SortOrder
    units?: SortOrderInput | SortOrder
    unit_price?: SortOrderInput | SortOrder
    total_price?: SortOrderInput | SortOrder
    tax?: SortOrderInput | SortOrder
    _count?: pricingCountOrderByAggregateInput
    _avg?: pricingAvgOrderByAggregateInput
    _max?: pricingMaxOrderByAggregateInput
    _min?: pricingMinOrderByAggregateInput
    _sum?: pricingSumOrderByAggregateInput
  }

  export type pricingScalarWhereWithAggregatesInput = {
    AND?: pricingScalarWhereWithAggregatesInput | pricingScalarWhereWithAggregatesInput[]
    OR?: pricingScalarWhereWithAggregatesInput[]
    NOT?: pricingScalarWhereWithAggregatesInput | pricingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"pricing"> | number
    pl_name?: StringWithAggregatesFilter<"pricing"> | string
    batch_no?: IntWithAggregatesFilter<"pricing"> | number
    units?: IntNullableWithAggregatesFilter<"pricing"> | number | null
    unit_price?: FloatNullableWithAggregatesFilter<"pricing"> | number | null
    total_price?: FloatNullableWithAggregatesFilter<"pricing"> | number | null
    tax?: FloatNullableWithAggregatesFilter<"pricing"> | number | null
  }

  export type seedWhereInput = {
    AND?: seedWhereInput | seedWhereInput[]
    OR?: seedWhereInput[]
    NOT?: seedWhereInput | seedWhereInput[]
    pl_name?: StringFilter<"seed"> | string
    sid?: IntFilter<"seed"> | number
    quantity?: IntNullableFilter<"seed"> | number | null
    price?: FloatNullableFilter<"seed"> | number | null
    temp?: FloatNullableFilter<"seed"> | number | null
    humidity?: StringNullableFilter<"seed"> | string | null
    expiration_date?: DateTimeNullableFilter<"seed"> | Date | string | null
    plant?: XOR<PlantRelationFilter, plantWhereInput>
    supplier?: XOR<SupplierRelationFilter, supplierWhereInput>
  }

  export type seedOrderByWithRelationInput = {
    pl_name?: SortOrder
    sid?: SortOrder
    quantity?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    temp?: SortOrderInput | SortOrder
    humidity?: SortOrderInput | SortOrder
    expiration_date?: SortOrderInput | SortOrder
    plant?: plantOrderByWithRelationInput
    supplier?: supplierOrderByWithRelationInput
  }

  export type seedWhereUniqueInput = Prisma.AtLeast<{
    sid_pl_name?: seedSidPl_nameCompoundUniqueInput
    AND?: seedWhereInput | seedWhereInput[]
    OR?: seedWhereInput[]
    NOT?: seedWhereInput | seedWhereInput[]
    pl_name?: StringFilter<"seed"> | string
    sid?: IntFilter<"seed"> | number
    quantity?: IntNullableFilter<"seed"> | number | null
    price?: FloatNullableFilter<"seed"> | number | null
    temp?: FloatNullableFilter<"seed"> | number | null
    humidity?: StringNullableFilter<"seed"> | string | null
    expiration_date?: DateTimeNullableFilter<"seed"> | Date | string | null
    plant?: XOR<PlantRelationFilter, plantWhereInput>
    supplier?: XOR<SupplierRelationFilter, supplierWhereInput>
  }, "sid_pl_name">

  export type seedOrderByWithAggregationInput = {
    pl_name?: SortOrder
    sid?: SortOrder
    quantity?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    temp?: SortOrderInput | SortOrder
    humidity?: SortOrderInput | SortOrder
    expiration_date?: SortOrderInput | SortOrder
    _count?: seedCountOrderByAggregateInput
    _avg?: seedAvgOrderByAggregateInput
    _max?: seedMaxOrderByAggregateInput
    _min?: seedMinOrderByAggregateInput
    _sum?: seedSumOrderByAggregateInput
  }

  export type seedScalarWhereWithAggregatesInput = {
    AND?: seedScalarWhereWithAggregatesInput | seedScalarWhereWithAggregatesInput[]
    OR?: seedScalarWhereWithAggregatesInput[]
    NOT?: seedScalarWhereWithAggregatesInput | seedScalarWhereWithAggregatesInput[]
    pl_name?: StringWithAggregatesFilter<"seed"> | string
    sid?: IntWithAggregatesFilter<"seed"> | number
    quantity?: IntNullableWithAggregatesFilter<"seed"> | number | null
    price?: FloatNullableWithAggregatesFilter<"seed"> | number | null
    temp?: FloatNullableWithAggregatesFilter<"seed"> | number | null
    humidity?: StringNullableWithAggregatesFilter<"seed"> | string | null
    expiration_date?: DateTimeNullableWithAggregatesFilter<"seed"> | Date | string | null
  }

  export type supplierWhereInput = {
    AND?: supplierWhereInput | supplierWhereInput[]
    OR?: supplierWhereInput[]
    NOT?: supplierWhereInput | supplierWhereInput[]
    sid?: IntFilter<"supplier"> | number
    name?: StringNullableFilter<"supplier"> | string | null
    phone?: IntNullableFilter<"supplier"> | number | null
    email?: StringNullableFilter<"supplier"> | string | null
    address?: StringNullableFilter<"supplier"> | string | null
    seed?: SeedListRelationFilter
  }

  export type supplierOrderByWithRelationInput = {
    sid?: SortOrder
    name?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    seed?: seedOrderByRelationAggregateInput
  }

  export type supplierWhereUniqueInput = Prisma.AtLeast<{
    sid?: number
    AND?: supplierWhereInput | supplierWhereInput[]
    OR?: supplierWhereInput[]
    NOT?: supplierWhereInput | supplierWhereInput[]
    name?: StringNullableFilter<"supplier"> | string | null
    phone?: IntNullableFilter<"supplier"> | number | null
    email?: StringNullableFilter<"supplier"> | string | null
    address?: StringNullableFilter<"supplier"> | string | null
    seed?: SeedListRelationFilter
  }, "sid">

  export type supplierOrderByWithAggregationInput = {
    sid?: SortOrder
    name?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    _count?: supplierCountOrderByAggregateInput
    _avg?: supplierAvgOrderByAggregateInput
    _max?: supplierMaxOrderByAggregateInput
    _min?: supplierMinOrderByAggregateInput
    _sum?: supplierSumOrderByAggregateInput
  }

  export type supplierScalarWhereWithAggregatesInput = {
    AND?: supplierScalarWhereWithAggregatesInput | supplierScalarWhereWithAggregatesInput[]
    OR?: supplierScalarWhereWithAggregatesInput[]
    NOT?: supplierScalarWhereWithAggregatesInput | supplierScalarWhereWithAggregatesInput[]
    sid?: IntWithAggregatesFilter<"supplier"> | number
    name?: StringNullableWithAggregatesFilter<"supplier"> | string | null
    phone?: IntNullableWithAggregatesFilter<"supplier"> | number | null
    email?: StringNullableWithAggregatesFilter<"supplier"> | string | null
    address?: StringNullableWithAggregatesFilter<"supplier"> | string | null
  }

  export type adminuserWhereInput = {
    AND?: adminuserWhereInput | adminuserWhereInput[]
    OR?: adminuserWhereInput[]
    NOT?: adminuserWhereInput | adminuserWhereInput[]
    id?: IntFilter<"adminuser"> | number
    username?: StringNullableFilter<"adminuser"> | string | null
    email?: StringNullableFilter<"adminuser"> | string | null
    hashedpassword?: StringNullableFilter<"adminuser"> | string | null
  }

  export type adminuserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    hashedpassword?: SortOrderInput | SortOrder
  }

  export type adminuserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: adminuserWhereInput | adminuserWhereInput[]
    OR?: adminuserWhereInput[]
    NOT?: adminuserWhereInput | adminuserWhereInput[]
    username?: StringNullableFilter<"adminuser"> | string | null
    email?: StringNullableFilter<"adminuser"> | string | null
    hashedpassword?: StringNullableFilter<"adminuser"> | string | null
  }, "id">

  export type adminuserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    hashedpassword?: SortOrderInput | SortOrder
    _count?: adminuserCountOrderByAggregateInput
    _avg?: adminuserAvgOrderByAggregateInput
    _max?: adminuserMaxOrderByAggregateInput
    _min?: adminuserMinOrderByAggregateInput
    _sum?: adminuserSumOrderByAggregateInput
  }

  export type adminuserScalarWhereWithAggregatesInput = {
    AND?: adminuserScalarWhereWithAggregatesInput | adminuserScalarWhereWithAggregatesInput[]
    OR?: adminuserScalarWhereWithAggregatesInput[]
    NOT?: adminuserScalarWhereWithAggregatesInput | adminuserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"adminuser"> | number
    username?: StringNullableWithAggregatesFilter<"adminuser"> | string | null
    email?: StringNullableWithAggregatesFilter<"adminuser"> | string | null
    hashedpassword?: StringNullableWithAggregatesFilter<"adminuser"> | string | null
  }

  export type customerCreateInput = {
    cid: number
    name?: string | null
    phone?: number | null
    email?: string | null
    age?: number | null
  }

  export type customerUncheckedCreateInput = {
    cid: number
    name?: string | null
    phone?: number | null
    email?: string | null
    age?: number | null
  }

  export type customerUpdateInput = {
    cid?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type customerUncheckedUpdateInput = {
    cid?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type customerCreateManyInput = {
    cid: number
    name?: string | null
    phone?: number | null
    email?: string | null
    age?: number | null
  }

  export type customerUpdateManyMutationInput = {
    cid?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type customerUncheckedUpdateManyInput = {
    cid?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type nurseplantCreateInput = {
    batch_no: number
    loc?: string | null
    stock?: number | null
    plant: plantCreateNestedOneWithoutNurseplantInput
  }

  export type nurseplantUncheckedCreateInput = {
    name: string
    batch_no: number
    loc?: string | null
    stock?: number | null
  }

  export type nurseplantUpdateInput = {
    batch_no?: IntFieldUpdateOperationsInput | number
    loc?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    plant?: plantUpdateOneRequiredWithoutNurseplantNestedInput
  }

  export type nurseplantUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    batch_no?: IntFieldUpdateOperationsInput | number
    loc?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type nurseplantCreateManyInput = {
    name: string
    batch_no: number
    loc?: string | null
    stock?: number | null
  }

  export type nurseplantUpdateManyMutationInput = {
    batch_no?: IntFieldUpdateOperationsInput | number
    loc?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type nurseplantUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    batch_no?: IntFieldUpdateOperationsInput | number
    loc?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type plantCreateInput = {
    name: string
    water?: string | null
    sunlight?: string | null
    lifespan?: number | null
    height?: number | null
    fruit_nut?: string | null
    soil_ph?: number | null
    temperature?: number | null
    fertilizer?: string | null
    pest?: string | null
    comp_plants?: string | null
    nurseplant?: nurseplantCreateNestedManyWithoutPlantInput
    pricing?: pricingCreateNestedManyWithoutPlantInput
    seed?: seedCreateNestedManyWithoutPlantInput
  }

  export type plantUncheckedCreateInput = {
    name: string
    water?: string | null
    sunlight?: string | null
    lifespan?: number | null
    height?: number | null
    fruit_nut?: string | null
    soil_ph?: number | null
    temperature?: number | null
    fertilizer?: string | null
    pest?: string | null
    comp_plants?: string | null
    nurseplant?: nurseplantUncheckedCreateNestedManyWithoutPlantInput
    pricing?: pricingUncheckedCreateNestedManyWithoutPlantInput
    seed?: seedUncheckedCreateNestedManyWithoutPlantInput
  }

  export type plantUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    water?: NullableStringFieldUpdateOperationsInput | string | null
    sunlight?: NullableStringFieldUpdateOperationsInput | string | null
    lifespan?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    fruit_nut?: NullableStringFieldUpdateOperationsInput | string | null
    soil_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    fertilizer?: NullableStringFieldUpdateOperationsInput | string | null
    pest?: NullableStringFieldUpdateOperationsInput | string | null
    comp_plants?: NullableStringFieldUpdateOperationsInput | string | null
    nurseplant?: nurseplantUpdateManyWithoutPlantNestedInput
    pricing?: pricingUpdateManyWithoutPlantNestedInput
    seed?: seedUpdateManyWithoutPlantNestedInput
  }

  export type plantUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    water?: NullableStringFieldUpdateOperationsInput | string | null
    sunlight?: NullableStringFieldUpdateOperationsInput | string | null
    lifespan?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    fruit_nut?: NullableStringFieldUpdateOperationsInput | string | null
    soil_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    fertilizer?: NullableStringFieldUpdateOperationsInput | string | null
    pest?: NullableStringFieldUpdateOperationsInput | string | null
    comp_plants?: NullableStringFieldUpdateOperationsInput | string | null
    nurseplant?: nurseplantUncheckedUpdateManyWithoutPlantNestedInput
    pricing?: pricingUncheckedUpdateManyWithoutPlantNestedInput
    seed?: seedUncheckedUpdateManyWithoutPlantNestedInput
  }

  export type plantCreateManyInput = {
    name: string
    water?: string | null
    sunlight?: string | null
    lifespan?: number | null
    height?: number | null
    fruit_nut?: string | null
    soil_ph?: number | null
    temperature?: number | null
    fertilizer?: string | null
    pest?: string | null
    comp_plants?: string | null
  }

  export type plantUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    water?: NullableStringFieldUpdateOperationsInput | string | null
    sunlight?: NullableStringFieldUpdateOperationsInput | string | null
    lifespan?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    fruit_nut?: NullableStringFieldUpdateOperationsInput | string | null
    soil_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    fertilizer?: NullableStringFieldUpdateOperationsInput | string | null
    pest?: NullableStringFieldUpdateOperationsInput | string | null
    comp_plants?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type plantUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    water?: NullableStringFieldUpdateOperationsInput | string | null
    sunlight?: NullableStringFieldUpdateOperationsInput | string | null
    lifespan?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    fruit_nut?: NullableStringFieldUpdateOperationsInput | string | null
    soil_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    fertilizer?: NullableStringFieldUpdateOperationsInput | string | null
    pest?: NullableStringFieldUpdateOperationsInput | string | null
    comp_plants?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type pricingCreateInput = {
    batch_no: number
    units?: number | null
    unit_price?: number | null
    total_price?: number | null
    tax?: number | null
    plant: plantCreateNestedOneWithoutPricingInput
  }

  export type pricingUncheckedCreateInput = {
    id?: number
    pl_name: string
    batch_no: number
    units?: number | null
    unit_price?: number | null
    total_price?: number | null
    tax?: number | null
  }

  export type pricingUpdateInput = {
    batch_no?: IntFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    unit_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    plant?: plantUpdateOneRequiredWithoutPricingNestedInput
  }

  export type pricingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pl_name?: StringFieldUpdateOperationsInput | string
    batch_no?: IntFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    unit_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type pricingCreateManyInput = {
    id?: number
    pl_name: string
    batch_no: number
    units?: number | null
    unit_price?: number | null
    total_price?: number | null
    tax?: number | null
  }

  export type pricingUpdateManyMutationInput = {
    batch_no?: IntFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    unit_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type pricingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pl_name?: StringFieldUpdateOperationsInput | string
    batch_no?: IntFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    unit_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type seedCreateInput = {
    quantity?: number | null
    price?: number | null
    temp?: number | null
    humidity?: string | null
    expiration_date?: Date | string | null
    plant: plantCreateNestedOneWithoutSeedInput
    supplier: supplierCreateNestedOneWithoutSeedInput
  }

  export type seedUncheckedCreateInput = {
    pl_name: string
    sid: number
    quantity?: number | null
    price?: number | null
    temp?: number | null
    humidity?: string | null
    expiration_date?: Date | string | null
  }

  export type seedUpdateInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    temp?: NullableFloatFieldUpdateOperationsInput | number | null
    humidity?: NullableStringFieldUpdateOperationsInput | string | null
    expiration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plant?: plantUpdateOneRequiredWithoutSeedNestedInput
    supplier?: supplierUpdateOneRequiredWithoutSeedNestedInput
  }

  export type seedUncheckedUpdateInput = {
    pl_name?: StringFieldUpdateOperationsInput | string
    sid?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    temp?: NullableFloatFieldUpdateOperationsInput | number | null
    humidity?: NullableStringFieldUpdateOperationsInput | string | null
    expiration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type seedCreateManyInput = {
    pl_name: string
    sid: number
    quantity?: number | null
    price?: number | null
    temp?: number | null
    humidity?: string | null
    expiration_date?: Date | string | null
  }

  export type seedUpdateManyMutationInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    temp?: NullableFloatFieldUpdateOperationsInput | number | null
    humidity?: NullableStringFieldUpdateOperationsInput | string | null
    expiration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type seedUncheckedUpdateManyInput = {
    pl_name?: StringFieldUpdateOperationsInput | string
    sid?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    temp?: NullableFloatFieldUpdateOperationsInput | number | null
    humidity?: NullableStringFieldUpdateOperationsInput | string | null
    expiration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type supplierCreateInput = {
    sid: number
    name?: string | null
    phone?: number | null
    email?: string | null
    address?: string | null
    seed?: seedCreateNestedManyWithoutSupplierInput
  }

  export type supplierUncheckedCreateInput = {
    sid: number
    name?: string | null
    phone?: number | null
    email?: string | null
    address?: string | null
    seed?: seedUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type supplierUpdateInput = {
    sid?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    seed?: seedUpdateManyWithoutSupplierNestedInput
  }

  export type supplierUncheckedUpdateInput = {
    sid?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    seed?: seedUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type supplierCreateManyInput = {
    sid: number
    name?: string | null
    phone?: number | null
    email?: string | null
    address?: string | null
  }

  export type supplierUpdateManyMutationInput = {
    sid?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type supplierUncheckedUpdateManyInput = {
    sid?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type adminuserCreateInput = {
    username?: string | null
    email?: string | null
    hashedpassword?: string | null
  }

  export type adminuserUncheckedCreateInput = {
    id?: number
    username?: string | null
    email?: string | null
    hashedpassword?: string | null
  }

  export type adminuserUpdateInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedpassword?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type adminuserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedpassword?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type adminuserCreateManyInput = {
    id?: number
    username?: string | null
    email?: string | null
    hashedpassword?: string | null
  }

  export type adminuserUpdateManyMutationInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedpassword?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type adminuserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedpassword?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type customerCountOrderByAggregateInput = {
    cid?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    age?: SortOrder
  }

  export type customerAvgOrderByAggregateInput = {
    cid?: SortOrder
    phone?: SortOrder
    age?: SortOrder
  }

  export type customerMaxOrderByAggregateInput = {
    cid?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    age?: SortOrder
  }

  export type customerMinOrderByAggregateInput = {
    cid?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    age?: SortOrder
  }

  export type customerSumOrderByAggregateInput = {
    cid?: SortOrder
    phone?: SortOrder
    age?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type PlantRelationFilter = {
    is?: plantWhereInput
    isNot?: plantWhereInput
  }

  export type nurseplantNameBatch_noCompoundUniqueInput = {
    name: string
    batch_no: number
  }

  export type nurseplantCountOrderByAggregateInput = {
    name?: SortOrder
    batch_no?: SortOrder
    loc?: SortOrder
    stock?: SortOrder
  }

  export type nurseplantAvgOrderByAggregateInput = {
    batch_no?: SortOrder
    stock?: SortOrder
  }

  export type nurseplantMaxOrderByAggregateInput = {
    name?: SortOrder
    batch_no?: SortOrder
    loc?: SortOrder
    stock?: SortOrder
  }

  export type nurseplantMinOrderByAggregateInput = {
    name?: SortOrder
    batch_no?: SortOrder
    loc?: SortOrder
    stock?: SortOrder
  }

  export type nurseplantSumOrderByAggregateInput = {
    batch_no?: SortOrder
    stock?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NurseplantListRelationFilter = {
    every?: nurseplantWhereInput
    some?: nurseplantWhereInput
    none?: nurseplantWhereInput
  }

  export type PricingListRelationFilter = {
    every?: pricingWhereInput
    some?: pricingWhereInput
    none?: pricingWhereInput
  }

  export type SeedListRelationFilter = {
    every?: seedWhereInput
    some?: seedWhereInput
    none?: seedWhereInput
  }

  export type nurseplantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type pricingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type seedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type plantCountOrderByAggregateInput = {
    name?: SortOrder
    water?: SortOrder
    sunlight?: SortOrder
    lifespan?: SortOrder
    height?: SortOrder
    fruit_nut?: SortOrder
    soil_ph?: SortOrder
    temperature?: SortOrder
    fertilizer?: SortOrder
    pest?: SortOrder
    comp_plants?: SortOrder
  }

  export type plantAvgOrderByAggregateInput = {
    lifespan?: SortOrder
    height?: SortOrder
    soil_ph?: SortOrder
    temperature?: SortOrder
  }

  export type plantMaxOrderByAggregateInput = {
    name?: SortOrder
    water?: SortOrder
    sunlight?: SortOrder
    lifespan?: SortOrder
    height?: SortOrder
    fruit_nut?: SortOrder
    soil_ph?: SortOrder
    temperature?: SortOrder
    fertilizer?: SortOrder
    pest?: SortOrder
    comp_plants?: SortOrder
  }

  export type plantMinOrderByAggregateInput = {
    name?: SortOrder
    water?: SortOrder
    sunlight?: SortOrder
    lifespan?: SortOrder
    height?: SortOrder
    fruit_nut?: SortOrder
    soil_ph?: SortOrder
    temperature?: SortOrder
    fertilizer?: SortOrder
    pest?: SortOrder
    comp_plants?: SortOrder
  }

  export type plantSumOrderByAggregateInput = {
    lifespan?: SortOrder
    height?: SortOrder
    soil_ph?: SortOrder
    temperature?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type pricingCountOrderByAggregateInput = {
    id?: SortOrder
    pl_name?: SortOrder
    batch_no?: SortOrder
    units?: SortOrder
    unit_price?: SortOrder
    total_price?: SortOrder
    tax?: SortOrder
  }

  export type pricingAvgOrderByAggregateInput = {
    id?: SortOrder
    batch_no?: SortOrder
    units?: SortOrder
    unit_price?: SortOrder
    total_price?: SortOrder
    tax?: SortOrder
  }

  export type pricingMaxOrderByAggregateInput = {
    id?: SortOrder
    pl_name?: SortOrder
    batch_no?: SortOrder
    units?: SortOrder
    unit_price?: SortOrder
    total_price?: SortOrder
    tax?: SortOrder
  }

  export type pricingMinOrderByAggregateInput = {
    id?: SortOrder
    pl_name?: SortOrder
    batch_no?: SortOrder
    units?: SortOrder
    unit_price?: SortOrder
    total_price?: SortOrder
    tax?: SortOrder
  }

  export type pricingSumOrderByAggregateInput = {
    id?: SortOrder
    batch_no?: SortOrder
    units?: SortOrder
    unit_price?: SortOrder
    total_price?: SortOrder
    tax?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SupplierRelationFilter = {
    is?: supplierWhereInput
    isNot?: supplierWhereInput
  }

  export type seedSidPl_nameCompoundUniqueInput = {
    sid: number
    pl_name: string
  }

  export type seedCountOrderByAggregateInput = {
    pl_name?: SortOrder
    sid?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    temp?: SortOrder
    humidity?: SortOrder
    expiration_date?: SortOrder
  }

  export type seedAvgOrderByAggregateInput = {
    sid?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    temp?: SortOrder
  }

  export type seedMaxOrderByAggregateInput = {
    pl_name?: SortOrder
    sid?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    temp?: SortOrder
    humidity?: SortOrder
    expiration_date?: SortOrder
  }

  export type seedMinOrderByAggregateInput = {
    pl_name?: SortOrder
    sid?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    temp?: SortOrder
    humidity?: SortOrder
    expiration_date?: SortOrder
  }

  export type seedSumOrderByAggregateInput = {
    sid?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    temp?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type supplierCountOrderByAggregateInput = {
    sid?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
  }

  export type supplierAvgOrderByAggregateInput = {
    sid?: SortOrder
    phone?: SortOrder
  }

  export type supplierMaxOrderByAggregateInput = {
    sid?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
  }

  export type supplierMinOrderByAggregateInput = {
    sid?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
  }

  export type supplierSumOrderByAggregateInput = {
    sid?: SortOrder
    phone?: SortOrder
  }

  export type adminuserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    hashedpassword?: SortOrder
  }

  export type adminuserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type adminuserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    hashedpassword?: SortOrder
  }

  export type adminuserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    hashedpassword?: SortOrder
  }

  export type adminuserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type plantCreateNestedOneWithoutNurseplantInput = {
    create?: XOR<plantCreateWithoutNurseplantInput, plantUncheckedCreateWithoutNurseplantInput>
    connectOrCreate?: plantCreateOrConnectWithoutNurseplantInput
    connect?: plantWhereUniqueInput
  }

  export type plantUpdateOneRequiredWithoutNurseplantNestedInput = {
    create?: XOR<plantCreateWithoutNurseplantInput, plantUncheckedCreateWithoutNurseplantInput>
    connectOrCreate?: plantCreateOrConnectWithoutNurseplantInput
    upsert?: plantUpsertWithoutNurseplantInput
    connect?: plantWhereUniqueInput
    update?: XOR<XOR<plantUpdateToOneWithWhereWithoutNurseplantInput, plantUpdateWithoutNurseplantInput>, plantUncheckedUpdateWithoutNurseplantInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type nurseplantCreateNestedManyWithoutPlantInput = {
    create?: XOR<nurseplantCreateWithoutPlantInput, nurseplantUncheckedCreateWithoutPlantInput> | nurseplantCreateWithoutPlantInput[] | nurseplantUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: nurseplantCreateOrConnectWithoutPlantInput | nurseplantCreateOrConnectWithoutPlantInput[]
    createMany?: nurseplantCreateManyPlantInputEnvelope
    connect?: nurseplantWhereUniqueInput | nurseplantWhereUniqueInput[]
  }

  export type pricingCreateNestedManyWithoutPlantInput = {
    create?: XOR<pricingCreateWithoutPlantInput, pricingUncheckedCreateWithoutPlantInput> | pricingCreateWithoutPlantInput[] | pricingUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: pricingCreateOrConnectWithoutPlantInput | pricingCreateOrConnectWithoutPlantInput[]
    createMany?: pricingCreateManyPlantInputEnvelope
    connect?: pricingWhereUniqueInput | pricingWhereUniqueInput[]
  }

  export type seedCreateNestedManyWithoutPlantInput = {
    create?: XOR<seedCreateWithoutPlantInput, seedUncheckedCreateWithoutPlantInput> | seedCreateWithoutPlantInput[] | seedUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: seedCreateOrConnectWithoutPlantInput | seedCreateOrConnectWithoutPlantInput[]
    createMany?: seedCreateManyPlantInputEnvelope
    connect?: seedWhereUniqueInput | seedWhereUniqueInput[]
  }

  export type nurseplantUncheckedCreateNestedManyWithoutPlantInput = {
    create?: XOR<nurseplantCreateWithoutPlantInput, nurseplantUncheckedCreateWithoutPlantInput> | nurseplantCreateWithoutPlantInput[] | nurseplantUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: nurseplantCreateOrConnectWithoutPlantInput | nurseplantCreateOrConnectWithoutPlantInput[]
    createMany?: nurseplantCreateManyPlantInputEnvelope
    connect?: nurseplantWhereUniqueInput | nurseplantWhereUniqueInput[]
  }

  export type pricingUncheckedCreateNestedManyWithoutPlantInput = {
    create?: XOR<pricingCreateWithoutPlantInput, pricingUncheckedCreateWithoutPlantInput> | pricingCreateWithoutPlantInput[] | pricingUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: pricingCreateOrConnectWithoutPlantInput | pricingCreateOrConnectWithoutPlantInput[]
    createMany?: pricingCreateManyPlantInputEnvelope
    connect?: pricingWhereUniqueInput | pricingWhereUniqueInput[]
  }

  export type seedUncheckedCreateNestedManyWithoutPlantInput = {
    create?: XOR<seedCreateWithoutPlantInput, seedUncheckedCreateWithoutPlantInput> | seedCreateWithoutPlantInput[] | seedUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: seedCreateOrConnectWithoutPlantInput | seedCreateOrConnectWithoutPlantInput[]
    createMany?: seedCreateManyPlantInputEnvelope
    connect?: seedWhereUniqueInput | seedWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type nurseplantUpdateManyWithoutPlantNestedInput = {
    create?: XOR<nurseplantCreateWithoutPlantInput, nurseplantUncheckedCreateWithoutPlantInput> | nurseplantCreateWithoutPlantInput[] | nurseplantUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: nurseplantCreateOrConnectWithoutPlantInput | nurseplantCreateOrConnectWithoutPlantInput[]
    upsert?: nurseplantUpsertWithWhereUniqueWithoutPlantInput | nurseplantUpsertWithWhereUniqueWithoutPlantInput[]
    createMany?: nurseplantCreateManyPlantInputEnvelope
    set?: nurseplantWhereUniqueInput | nurseplantWhereUniqueInput[]
    disconnect?: nurseplantWhereUniqueInput | nurseplantWhereUniqueInput[]
    delete?: nurseplantWhereUniqueInput | nurseplantWhereUniqueInput[]
    connect?: nurseplantWhereUniqueInput | nurseplantWhereUniqueInput[]
    update?: nurseplantUpdateWithWhereUniqueWithoutPlantInput | nurseplantUpdateWithWhereUniqueWithoutPlantInput[]
    updateMany?: nurseplantUpdateManyWithWhereWithoutPlantInput | nurseplantUpdateManyWithWhereWithoutPlantInput[]
    deleteMany?: nurseplantScalarWhereInput | nurseplantScalarWhereInput[]
  }

  export type pricingUpdateManyWithoutPlantNestedInput = {
    create?: XOR<pricingCreateWithoutPlantInput, pricingUncheckedCreateWithoutPlantInput> | pricingCreateWithoutPlantInput[] | pricingUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: pricingCreateOrConnectWithoutPlantInput | pricingCreateOrConnectWithoutPlantInput[]
    upsert?: pricingUpsertWithWhereUniqueWithoutPlantInput | pricingUpsertWithWhereUniqueWithoutPlantInput[]
    createMany?: pricingCreateManyPlantInputEnvelope
    set?: pricingWhereUniqueInput | pricingWhereUniqueInput[]
    disconnect?: pricingWhereUniqueInput | pricingWhereUniqueInput[]
    delete?: pricingWhereUniqueInput | pricingWhereUniqueInput[]
    connect?: pricingWhereUniqueInput | pricingWhereUniqueInput[]
    update?: pricingUpdateWithWhereUniqueWithoutPlantInput | pricingUpdateWithWhereUniqueWithoutPlantInput[]
    updateMany?: pricingUpdateManyWithWhereWithoutPlantInput | pricingUpdateManyWithWhereWithoutPlantInput[]
    deleteMany?: pricingScalarWhereInput | pricingScalarWhereInput[]
  }

  export type seedUpdateManyWithoutPlantNestedInput = {
    create?: XOR<seedCreateWithoutPlantInput, seedUncheckedCreateWithoutPlantInput> | seedCreateWithoutPlantInput[] | seedUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: seedCreateOrConnectWithoutPlantInput | seedCreateOrConnectWithoutPlantInput[]
    upsert?: seedUpsertWithWhereUniqueWithoutPlantInput | seedUpsertWithWhereUniqueWithoutPlantInput[]
    createMany?: seedCreateManyPlantInputEnvelope
    set?: seedWhereUniqueInput | seedWhereUniqueInput[]
    disconnect?: seedWhereUniqueInput | seedWhereUniqueInput[]
    delete?: seedWhereUniqueInput | seedWhereUniqueInput[]
    connect?: seedWhereUniqueInput | seedWhereUniqueInput[]
    update?: seedUpdateWithWhereUniqueWithoutPlantInput | seedUpdateWithWhereUniqueWithoutPlantInput[]
    updateMany?: seedUpdateManyWithWhereWithoutPlantInput | seedUpdateManyWithWhereWithoutPlantInput[]
    deleteMany?: seedScalarWhereInput | seedScalarWhereInput[]
  }

  export type nurseplantUncheckedUpdateManyWithoutPlantNestedInput = {
    create?: XOR<nurseplantCreateWithoutPlantInput, nurseplantUncheckedCreateWithoutPlantInput> | nurseplantCreateWithoutPlantInput[] | nurseplantUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: nurseplantCreateOrConnectWithoutPlantInput | nurseplantCreateOrConnectWithoutPlantInput[]
    upsert?: nurseplantUpsertWithWhereUniqueWithoutPlantInput | nurseplantUpsertWithWhereUniqueWithoutPlantInput[]
    createMany?: nurseplantCreateManyPlantInputEnvelope
    set?: nurseplantWhereUniqueInput | nurseplantWhereUniqueInput[]
    disconnect?: nurseplantWhereUniqueInput | nurseplantWhereUniqueInput[]
    delete?: nurseplantWhereUniqueInput | nurseplantWhereUniqueInput[]
    connect?: nurseplantWhereUniqueInput | nurseplantWhereUniqueInput[]
    update?: nurseplantUpdateWithWhereUniqueWithoutPlantInput | nurseplantUpdateWithWhereUniqueWithoutPlantInput[]
    updateMany?: nurseplantUpdateManyWithWhereWithoutPlantInput | nurseplantUpdateManyWithWhereWithoutPlantInput[]
    deleteMany?: nurseplantScalarWhereInput | nurseplantScalarWhereInput[]
  }

  export type pricingUncheckedUpdateManyWithoutPlantNestedInput = {
    create?: XOR<pricingCreateWithoutPlantInput, pricingUncheckedCreateWithoutPlantInput> | pricingCreateWithoutPlantInput[] | pricingUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: pricingCreateOrConnectWithoutPlantInput | pricingCreateOrConnectWithoutPlantInput[]
    upsert?: pricingUpsertWithWhereUniqueWithoutPlantInput | pricingUpsertWithWhereUniqueWithoutPlantInput[]
    createMany?: pricingCreateManyPlantInputEnvelope
    set?: pricingWhereUniqueInput | pricingWhereUniqueInput[]
    disconnect?: pricingWhereUniqueInput | pricingWhereUniqueInput[]
    delete?: pricingWhereUniqueInput | pricingWhereUniqueInput[]
    connect?: pricingWhereUniqueInput | pricingWhereUniqueInput[]
    update?: pricingUpdateWithWhereUniqueWithoutPlantInput | pricingUpdateWithWhereUniqueWithoutPlantInput[]
    updateMany?: pricingUpdateManyWithWhereWithoutPlantInput | pricingUpdateManyWithWhereWithoutPlantInput[]
    deleteMany?: pricingScalarWhereInput | pricingScalarWhereInput[]
  }

  export type seedUncheckedUpdateManyWithoutPlantNestedInput = {
    create?: XOR<seedCreateWithoutPlantInput, seedUncheckedCreateWithoutPlantInput> | seedCreateWithoutPlantInput[] | seedUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: seedCreateOrConnectWithoutPlantInput | seedCreateOrConnectWithoutPlantInput[]
    upsert?: seedUpsertWithWhereUniqueWithoutPlantInput | seedUpsertWithWhereUniqueWithoutPlantInput[]
    createMany?: seedCreateManyPlantInputEnvelope
    set?: seedWhereUniqueInput | seedWhereUniqueInput[]
    disconnect?: seedWhereUniqueInput | seedWhereUniqueInput[]
    delete?: seedWhereUniqueInput | seedWhereUniqueInput[]
    connect?: seedWhereUniqueInput | seedWhereUniqueInput[]
    update?: seedUpdateWithWhereUniqueWithoutPlantInput | seedUpdateWithWhereUniqueWithoutPlantInput[]
    updateMany?: seedUpdateManyWithWhereWithoutPlantInput | seedUpdateManyWithWhereWithoutPlantInput[]
    deleteMany?: seedScalarWhereInput | seedScalarWhereInput[]
  }

  export type plantCreateNestedOneWithoutPricingInput = {
    create?: XOR<plantCreateWithoutPricingInput, plantUncheckedCreateWithoutPricingInput>
    connectOrCreate?: plantCreateOrConnectWithoutPricingInput
    connect?: plantWhereUniqueInput
  }

  export type plantUpdateOneRequiredWithoutPricingNestedInput = {
    create?: XOR<plantCreateWithoutPricingInput, plantUncheckedCreateWithoutPricingInput>
    connectOrCreate?: plantCreateOrConnectWithoutPricingInput
    upsert?: plantUpsertWithoutPricingInput
    connect?: plantWhereUniqueInput
    update?: XOR<XOR<plantUpdateToOneWithWhereWithoutPricingInput, plantUpdateWithoutPricingInput>, plantUncheckedUpdateWithoutPricingInput>
  }

  export type plantCreateNestedOneWithoutSeedInput = {
    create?: XOR<plantCreateWithoutSeedInput, plantUncheckedCreateWithoutSeedInput>
    connectOrCreate?: plantCreateOrConnectWithoutSeedInput
    connect?: plantWhereUniqueInput
  }

  export type supplierCreateNestedOneWithoutSeedInput = {
    create?: XOR<supplierCreateWithoutSeedInput, supplierUncheckedCreateWithoutSeedInput>
    connectOrCreate?: supplierCreateOrConnectWithoutSeedInput
    connect?: supplierWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type plantUpdateOneRequiredWithoutSeedNestedInput = {
    create?: XOR<plantCreateWithoutSeedInput, plantUncheckedCreateWithoutSeedInput>
    connectOrCreate?: plantCreateOrConnectWithoutSeedInput
    upsert?: plantUpsertWithoutSeedInput
    connect?: plantWhereUniqueInput
    update?: XOR<XOR<plantUpdateToOneWithWhereWithoutSeedInput, plantUpdateWithoutSeedInput>, plantUncheckedUpdateWithoutSeedInput>
  }

  export type supplierUpdateOneRequiredWithoutSeedNestedInput = {
    create?: XOR<supplierCreateWithoutSeedInput, supplierUncheckedCreateWithoutSeedInput>
    connectOrCreate?: supplierCreateOrConnectWithoutSeedInput
    upsert?: supplierUpsertWithoutSeedInput
    connect?: supplierWhereUniqueInput
    update?: XOR<XOR<supplierUpdateToOneWithWhereWithoutSeedInput, supplierUpdateWithoutSeedInput>, supplierUncheckedUpdateWithoutSeedInput>
  }

  export type seedCreateNestedManyWithoutSupplierInput = {
    create?: XOR<seedCreateWithoutSupplierInput, seedUncheckedCreateWithoutSupplierInput> | seedCreateWithoutSupplierInput[] | seedUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: seedCreateOrConnectWithoutSupplierInput | seedCreateOrConnectWithoutSupplierInput[]
    createMany?: seedCreateManySupplierInputEnvelope
    connect?: seedWhereUniqueInput | seedWhereUniqueInput[]
  }

  export type seedUncheckedCreateNestedManyWithoutSupplierInput = {
    create?: XOR<seedCreateWithoutSupplierInput, seedUncheckedCreateWithoutSupplierInput> | seedCreateWithoutSupplierInput[] | seedUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: seedCreateOrConnectWithoutSupplierInput | seedCreateOrConnectWithoutSupplierInput[]
    createMany?: seedCreateManySupplierInputEnvelope
    connect?: seedWhereUniqueInput | seedWhereUniqueInput[]
  }

  export type seedUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<seedCreateWithoutSupplierInput, seedUncheckedCreateWithoutSupplierInput> | seedCreateWithoutSupplierInput[] | seedUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: seedCreateOrConnectWithoutSupplierInput | seedCreateOrConnectWithoutSupplierInput[]
    upsert?: seedUpsertWithWhereUniqueWithoutSupplierInput | seedUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: seedCreateManySupplierInputEnvelope
    set?: seedWhereUniqueInput | seedWhereUniqueInput[]
    disconnect?: seedWhereUniqueInput | seedWhereUniqueInput[]
    delete?: seedWhereUniqueInput | seedWhereUniqueInput[]
    connect?: seedWhereUniqueInput | seedWhereUniqueInput[]
    update?: seedUpdateWithWhereUniqueWithoutSupplierInput | seedUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: seedUpdateManyWithWhereWithoutSupplierInput | seedUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: seedScalarWhereInput | seedScalarWhereInput[]
  }

  export type seedUncheckedUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<seedCreateWithoutSupplierInput, seedUncheckedCreateWithoutSupplierInput> | seedCreateWithoutSupplierInput[] | seedUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: seedCreateOrConnectWithoutSupplierInput | seedCreateOrConnectWithoutSupplierInput[]
    upsert?: seedUpsertWithWhereUniqueWithoutSupplierInput | seedUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: seedCreateManySupplierInputEnvelope
    set?: seedWhereUniqueInput | seedWhereUniqueInput[]
    disconnect?: seedWhereUniqueInput | seedWhereUniqueInput[]
    delete?: seedWhereUniqueInput | seedWhereUniqueInput[]
    connect?: seedWhereUniqueInput | seedWhereUniqueInput[]
    update?: seedUpdateWithWhereUniqueWithoutSupplierInput | seedUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: seedUpdateManyWithWhereWithoutSupplierInput | seedUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: seedScalarWhereInput | seedScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type plantCreateWithoutNurseplantInput = {
    name: string
    water?: string | null
    sunlight?: string | null
    lifespan?: number | null
    height?: number | null
    fruit_nut?: string | null
    soil_ph?: number | null
    temperature?: number | null
    fertilizer?: string | null
    pest?: string | null
    comp_plants?: string | null
    pricing?: pricingCreateNestedManyWithoutPlantInput
    seed?: seedCreateNestedManyWithoutPlantInput
  }

  export type plantUncheckedCreateWithoutNurseplantInput = {
    name: string
    water?: string | null
    sunlight?: string | null
    lifespan?: number | null
    height?: number | null
    fruit_nut?: string | null
    soil_ph?: number | null
    temperature?: number | null
    fertilizer?: string | null
    pest?: string | null
    comp_plants?: string | null
    pricing?: pricingUncheckedCreateNestedManyWithoutPlantInput
    seed?: seedUncheckedCreateNestedManyWithoutPlantInput
  }

  export type plantCreateOrConnectWithoutNurseplantInput = {
    where: plantWhereUniqueInput
    create: XOR<plantCreateWithoutNurseplantInput, plantUncheckedCreateWithoutNurseplantInput>
  }

  export type plantUpsertWithoutNurseplantInput = {
    update: XOR<plantUpdateWithoutNurseplantInput, plantUncheckedUpdateWithoutNurseplantInput>
    create: XOR<plantCreateWithoutNurseplantInput, plantUncheckedCreateWithoutNurseplantInput>
    where?: plantWhereInput
  }

  export type plantUpdateToOneWithWhereWithoutNurseplantInput = {
    where?: plantWhereInput
    data: XOR<plantUpdateWithoutNurseplantInput, plantUncheckedUpdateWithoutNurseplantInput>
  }

  export type plantUpdateWithoutNurseplantInput = {
    name?: StringFieldUpdateOperationsInput | string
    water?: NullableStringFieldUpdateOperationsInput | string | null
    sunlight?: NullableStringFieldUpdateOperationsInput | string | null
    lifespan?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    fruit_nut?: NullableStringFieldUpdateOperationsInput | string | null
    soil_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    fertilizer?: NullableStringFieldUpdateOperationsInput | string | null
    pest?: NullableStringFieldUpdateOperationsInput | string | null
    comp_plants?: NullableStringFieldUpdateOperationsInput | string | null
    pricing?: pricingUpdateManyWithoutPlantNestedInput
    seed?: seedUpdateManyWithoutPlantNestedInput
  }

  export type plantUncheckedUpdateWithoutNurseplantInput = {
    name?: StringFieldUpdateOperationsInput | string
    water?: NullableStringFieldUpdateOperationsInput | string | null
    sunlight?: NullableStringFieldUpdateOperationsInput | string | null
    lifespan?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    fruit_nut?: NullableStringFieldUpdateOperationsInput | string | null
    soil_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    fertilizer?: NullableStringFieldUpdateOperationsInput | string | null
    pest?: NullableStringFieldUpdateOperationsInput | string | null
    comp_plants?: NullableStringFieldUpdateOperationsInput | string | null
    pricing?: pricingUncheckedUpdateManyWithoutPlantNestedInput
    seed?: seedUncheckedUpdateManyWithoutPlantNestedInput
  }

  export type nurseplantCreateWithoutPlantInput = {
    batch_no: number
    loc?: string | null
    stock?: number | null
  }

  export type nurseplantUncheckedCreateWithoutPlantInput = {
    batch_no: number
    loc?: string | null
    stock?: number | null
  }

  export type nurseplantCreateOrConnectWithoutPlantInput = {
    where: nurseplantWhereUniqueInput
    create: XOR<nurseplantCreateWithoutPlantInput, nurseplantUncheckedCreateWithoutPlantInput>
  }

  export type nurseplantCreateManyPlantInputEnvelope = {
    data: nurseplantCreateManyPlantInput | nurseplantCreateManyPlantInput[]
    skipDuplicates?: boolean
  }

  export type pricingCreateWithoutPlantInput = {
    batch_no: number
    units?: number | null
    unit_price?: number | null
    total_price?: number | null
    tax?: number | null
  }

  export type pricingUncheckedCreateWithoutPlantInput = {
    id?: number
    batch_no: number
    units?: number | null
    unit_price?: number | null
    total_price?: number | null
    tax?: number | null
  }

  export type pricingCreateOrConnectWithoutPlantInput = {
    where: pricingWhereUniqueInput
    create: XOR<pricingCreateWithoutPlantInput, pricingUncheckedCreateWithoutPlantInput>
  }

  export type pricingCreateManyPlantInputEnvelope = {
    data: pricingCreateManyPlantInput | pricingCreateManyPlantInput[]
    skipDuplicates?: boolean
  }

  export type seedCreateWithoutPlantInput = {
    quantity?: number | null
    price?: number | null
    temp?: number | null
    humidity?: string | null
    expiration_date?: Date | string | null
    supplier: supplierCreateNestedOneWithoutSeedInput
  }

  export type seedUncheckedCreateWithoutPlantInput = {
    sid: number
    quantity?: number | null
    price?: number | null
    temp?: number | null
    humidity?: string | null
    expiration_date?: Date | string | null
  }

  export type seedCreateOrConnectWithoutPlantInput = {
    where: seedWhereUniqueInput
    create: XOR<seedCreateWithoutPlantInput, seedUncheckedCreateWithoutPlantInput>
  }

  export type seedCreateManyPlantInputEnvelope = {
    data: seedCreateManyPlantInput | seedCreateManyPlantInput[]
    skipDuplicates?: boolean
  }

  export type nurseplantUpsertWithWhereUniqueWithoutPlantInput = {
    where: nurseplantWhereUniqueInput
    update: XOR<nurseplantUpdateWithoutPlantInput, nurseplantUncheckedUpdateWithoutPlantInput>
    create: XOR<nurseplantCreateWithoutPlantInput, nurseplantUncheckedCreateWithoutPlantInput>
  }

  export type nurseplantUpdateWithWhereUniqueWithoutPlantInput = {
    where: nurseplantWhereUniqueInput
    data: XOR<nurseplantUpdateWithoutPlantInput, nurseplantUncheckedUpdateWithoutPlantInput>
  }

  export type nurseplantUpdateManyWithWhereWithoutPlantInput = {
    where: nurseplantScalarWhereInput
    data: XOR<nurseplantUpdateManyMutationInput, nurseplantUncheckedUpdateManyWithoutPlantInput>
  }

  export type nurseplantScalarWhereInput = {
    AND?: nurseplantScalarWhereInput | nurseplantScalarWhereInput[]
    OR?: nurseplantScalarWhereInput[]
    NOT?: nurseplantScalarWhereInput | nurseplantScalarWhereInput[]
    name?: StringFilter<"nurseplant"> | string
    batch_no?: IntFilter<"nurseplant"> | number
    loc?: StringNullableFilter<"nurseplant"> | string | null
    stock?: IntNullableFilter<"nurseplant"> | number | null
  }

  export type pricingUpsertWithWhereUniqueWithoutPlantInput = {
    where: pricingWhereUniqueInput
    update: XOR<pricingUpdateWithoutPlantInput, pricingUncheckedUpdateWithoutPlantInput>
    create: XOR<pricingCreateWithoutPlantInput, pricingUncheckedCreateWithoutPlantInput>
  }

  export type pricingUpdateWithWhereUniqueWithoutPlantInput = {
    where: pricingWhereUniqueInput
    data: XOR<pricingUpdateWithoutPlantInput, pricingUncheckedUpdateWithoutPlantInput>
  }

  export type pricingUpdateManyWithWhereWithoutPlantInput = {
    where: pricingScalarWhereInput
    data: XOR<pricingUpdateManyMutationInput, pricingUncheckedUpdateManyWithoutPlantInput>
  }

  export type pricingScalarWhereInput = {
    AND?: pricingScalarWhereInput | pricingScalarWhereInput[]
    OR?: pricingScalarWhereInput[]
    NOT?: pricingScalarWhereInput | pricingScalarWhereInput[]
    id?: IntFilter<"pricing"> | number
    pl_name?: StringFilter<"pricing"> | string
    batch_no?: IntFilter<"pricing"> | number
    units?: IntNullableFilter<"pricing"> | number | null
    unit_price?: FloatNullableFilter<"pricing"> | number | null
    total_price?: FloatNullableFilter<"pricing"> | number | null
    tax?: FloatNullableFilter<"pricing"> | number | null
  }

  export type seedUpsertWithWhereUniqueWithoutPlantInput = {
    where: seedWhereUniqueInput
    update: XOR<seedUpdateWithoutPlantInput, seedUncheckedUpdateWithoutPlantInput>
    create: XOR<seedCreateWithoutPlantInput, seedUncheckedCreateWithoutPlantInput>
  }

  export type seedUpdateWithWhereUniqueWithoutPlantInput = {
    where: seedWhereUniqueInput
    data: XOR<seedUpdateWithoutPlantInput, seedUncheckedUpdateWithoutPlantInput>
  }

  export type seedUpdateManyWithWhereWithoutPlantInput = {
    where: seedScalarWhereInput
    data: XOR<seedUpdateManyMutationInput, seedUncheckedUpdateManyWithoutPlantInput>
  }

  export type seedScalarWhereInput = {
    AND?: seedScalarWhereInput | seedScalarWhereInput[]
    OR?: seedScalarWhereInput[]
    NOT?: seedScalarWhereInput | seedScalarWhereInput[]
    pl_name?: StringFilter<"seed"> | string
    sid?: IntFilter<"seed"> | number
    quantity?: IntNullableFilter<"seed"> | number | null
    price?: FloatNullableFilter<"seed"> | number | null
    temp?: FloatNullableFilter<"seed"> | number | null
    humidity?: StringNullableFilter<"seed"> | string | null
    expiration_date?: DateTimeNullableFilter<"seed"> | Date | string | null
  }

  export type plantCreateWithoutPricingInput = {
    name: string
    water?: string | null
    sunlight?: string | null
    lifespan?: number | null
    height?: number | null
    fruit_nut?: string | null
    soil_ph?: number | null
    temperature?: number | null
    fertilizer?: string | null
    pest?: string | null
    comp_plants?: string | null
    nurseplant?: nurseplantCreateNestedManyWithoutPlantInput
    seed?: seedCreateNestedManyWithoutPlantInput
  }

  export type plantUncheckedCreateWithoutPricingInput = {
    name: string
    water?: string | null
    sunlight?: string | null
    lifespan?: number | null
    height?: number | null
    fruit_nut?: string | null
    soil_ph?: number | null
    temperature?: number | null
    fertilizer?: string | null
    pest?: string | null
    comp_plants?: string | null
    nurseplant?: nurseplantUncheckedCreateNestedManyWithoutPlantInput
    seed?: seedUncheckedCreateNestedManyWithoutPlantInput
  }

  export type plantCreateOrConnectWithoutPricingInput = {
    where: plantWhereUniqueInput
    create: XOR<plantCreateWithoutPricingInput, plantUncheckedCreateWithoutPricingInput>
  }

  export type plantUpsertWithoutPricingInput = {
    update: XOR<plantUpdateWithoutPricingInput, plantUncheckedUpdateWithoutPricingInput>
    create: XOR<plantCreateWithoutPricingInput, plantUncheckedCreateWithoutPricingInput>
    where?: plantWhereInput
  }

  export type plantUpdateToOneWithWhereWithoutPricingInput = {
    where?: plantWhereInput
    data: XOR<plantUpdateWithoutPricingInput, plantUncheckedUpdateWithoutPricingInput>
  }

  export type plantUpdateWithoutPricingInput = {
    name?: StringFieldUpdateOperationsInput | string
    water?: NullableStringFieldUpdateOperationsInput | string | null
    sunlight?: NullableStringFieldUpdateOperationsInput | string | null
    lifespan?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    fruit_nut?: NullableStringFieldUpdateOperationsInput | string | null
    soil_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    fertilizer?: NullableStringFieldUpdateOperationsInput | string | null
    pest?: NullableStringFieldUpdateOperationsInput | string | null
    comp_plants?: NullableStringFieldUpdateOperationsInput | string | null
    nurseplant?: nurseplantUpdateManyWithoutPlantNestedInput
    seed?: seedUpdateManyWithoutPlantNestedInput
  }

  export type plantUncheckedUpdateWithoutPricingInput = {
    name?: StringFieldUpdateOperationsInput | string
    water?: NullableStringFieldUpdateOperationsInput | string | null
    sunlight?: NullableStringFieldUpdateOperationsInput | string | null
    lifespan?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    fruit_nut?: NullableStringFieldUpdateOperationsInput | string | null
    soil_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    fertilizer?: NullableStringFieldUpdateOperationsInput | string | null
    pest?: NullableStringFieldUpdateOperationsInput | string | null
    comp_plants?: NullableStringFieldUpdateOperationsInput | string | null
    nurseplant?: nurseplantUncheckedUpdateManyWithoutPlantNestedInput
    seed?: seedUncheckedUpdateManyWithoutPlantNestedInput
  }

  export type plantCreateWithoutSeedInput = {
    name: string
    water?: string | null
    sunlight?: string | null
    lifespan?: number | null
    height?: number | null
    fruit_nut?: string | null
    soil_ph?: number | null
    temperature?: number | null
    fertilizer?: string | null
    pest?: string | null
    comp_plants?: string | null
    nurseplant?: nurseplantCreateNestedManyWithoutPlantInput
    pricing?: pricingCreateNestedManyWithoutPlantInput
  }

  export type plantUncheckedCreateWithoutSeedInput = {
    name: string
    water?: string | null
    sunlight?: string | null
    lifespan?: number | null
    height?: number | null
    fruit_nut?: string | null
    soil_ph?: number | null
    temperature?: number | null
    fertilizer?: string | null
    pest?: string | null
    comp_plants?: string | null
    nurseplant?: nurseplantUncheckedCreateNestedManyWithoutPlantInput
    pricing?: pricingUncheckedCreateNestedManyWithoutPlantInput
  }

  export type plantCreateOrConnectWithoutSeedInput = {
    where: plantWhereUniqueInput
    create: XOR<plantCreateWithoutSeedInput, plantUncheckedCreateWithoutSeedInput>
  }

  export type supplierCreateWithoutSeedInput = {
    sid: number
    name?: string | null
    phone?: number | null
    email?: string | null
    address?: string | null
  }

  export type supplierUncheckedCreateWithoutSeedInput = {
    sid: number
    name?: string | null
    phone?: number | null
    email?: string | null
    address?: string | null
  }

  export type supplierCreateOrConnectWithoutSeedInput = {
    where: supplierWhereUniqueInput
    create: XOR<supplierCreateWithoutSeedInput, supplierUncheckedCreateWithoutSeedInput>
  }

  export type plantUpsertWithoutSeedInput = {
    update: XOR<plantUpdateWithoutSeedInput, plantUncheckedUpdateWithoutSeedInput>
    create: XOR<plantCreateWithoutSeedInput, plantUncheckedCreateWithoutSeedInput>
    where?: plantWhereInput
  }

  export type plantUpdateToOneWithWhereWithoutSeedInput = {
    where?: plantWhereInput
    data: XOR<plantUpdateWithoutSeedInput, plantUncheckedUpdateWithoutSeedInput>
  }

  export type plantUpdateWithoutSeedInput = {
    name?: StringFieldUpdateOperationsInput | string
    water?: NullableStringFieldUpdateOperationsInput | string | null
    sunlight?: NullableStringFieldUpdateOperationsInput | string | null
    lifespan?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    fruit_nut?: NullableStringFieldUpdateOperationsInput | string | null
    soil_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    fertilizer?: NullableStringFieldUpdateOperationsInput | string | null
    pest?: NullableStringFieldUpdateOperationsInput | string | null
    comp_plants?: NullableStringFieldUpdateOperationsInput | string | null
    nurseplant?: nurseplantUpdateManyWithoutPlantNestedInput
    pricing?: pricingUpdateManyWithoutPlantNestedInput
  }

  export type plantUncheckedUpdateWithoutSeedInput = {
    name?: StringFieldUpdateOperationsInput | string
    water?: NullableStringFieldUpdateOperationsInput | string | null
    sunlight?: NullableStringFieldUpdateOperationsInput | string | null
    lifespan?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    fruit_nut?: NullableStringFieldUpdateOperationsInput | string | null
    soil_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    fertilizer?: NullableStringFieldUpdateOperationsInput | string | null
    pest?: NullableStringFieldUpdateOperationsInput | string | null
    comp_plants?: NullableStringFieldUpdateOperationsInput | string | null
    nurseplant?: nurseplantUncheckedUpdateManyWithoutPlantNestedInput
    pricing?: pricingUncheckedUpdateManyWithoutPlantNestedInput
  }

  export type supplierUpsertWithoutSeedInput = {
    update: XOR<supplierUpdateWithoutSeedInput, supplierUncheckedUpdateWithoutSeedInput>
    create: XOR<supplierCreateWithoutSeedInput, supplierUncheckedCreateWithoutSeedInput>
    where?: supplierWhereInput
  }

  export type supplierUpdateToOneWithWhereWithoutSeedInput = {
    where?: supplierWhereInput
    data: XOR<supplierUpdateWithoutSeedInput, supplierUncheckedUpdateWithoutSeedInput>
  }

  export type supplierUpdateWithoutSeedInput = {
    sid?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type supplierUncheckedUpdateWithoutSeedInput = {
    sid?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type seedCreateWithoutSupplierInput = {
    quantity?: number | null
    price?: number | null
    temp?: number | null
    humidity?: string | null
    expiration_date?: Date | string | null
    plant: plantCreateNestedOneWithoutSeedInput
  }

  export type seedUncheckedCreateWithoutSupplierInput = {
    pl_name: string
    quantity?: number | null
    price?: number | null
    temp?: number | null
    humidity?: string | null
    expiration_date?: Date | string | null
  }

  export type seedCreateOrConnectWithoutSupplierInput = {
    where: seedWhereUniqueInput
    create: XOR<seedCreateWithoutSupplierInput, seedUncheckedCreateWithoutSupplierInput>
  }

  export type seedCreateManySupplierInputEnvelope = {
    data: seedCreateManySupplierInput | seedCreateManySupplierInput[]
    skipDuplicates?: boolean
  }

  export type seedUpsertWithWhereUniqueWithoutSupplierInput = {
    where: seedWhereUniqueInput
    update: XOR<seedUpdateWithoutSupplierInput, seedUncheckedUpdateWithoutSupplierInput>
    create: XOR<seedCreateWithoutSupplierInput, seedUncheckedCreateWithoutSupplierInput>
  }

  export type seedUpdateWithWhereUniqueWithoutSupplierInput = {
    where: seedWhereUniqueInput
    data: XOR<seedUpdateWithoutSupplierInput, seedUncheckedUpdateWithoutSupplierInput>
  }

  export type seedUpdateManyWithWhereWithoutSupplierInput = {
    where: seedScalarWhereInput
    data: XOR<seedUpdateManyMutationInput, seedUncheckedUpdateManyWithoutSupplierInput>
  }

  export type nurseplantCreateManyPlantInput = {
    batch_no: number
    loc?: string | null
    stock?: number | null
  }

  export type pricingCreateManyPlantInput = {
    id?: number
    batch_no: number
    units?: number | null
    unit_price?: number | null
    total_price?: number | null
    tax?: number | null
  }

  export type seedCreateManyPlantInput = {
    sid: number
    quantity?: number | null
    price?: number | null
    temp?: number | null
    humidity?: string | null
    expiration_date?: Date | string | null
  }

  export type nurseplantUpdateWithoutPlantInput = {
    batch_no?: IntFieldUpdateOperationsInput | number
    loc?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type nurseplantUncheckedUpdateWithoutPlantInput = {
    batch_no?: IntFieldUpdateOperationsInput | number
    loc?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type nurseplantUncheckedUpdateManyWithoutPlantInput = {
    batch_no?: IntFieldUpdateOperationsInput | number
    loc?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type pricingUpdateWithoutPlantInput = {
    batch_no?: IntFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    unit_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type pricingUncheckedUpdateWithoutPlantInput = {
    id?: IntFieldUpdateOperationsInput | number
    batch_no?: IntFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    unit_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type pricingUncheckedUpdateManyWithoutPlantInput = {
    id?: IntFieldUpdateOperationsInput | number
    batch_no?: IntFieldUpdateOperationsInput | number
    units?: NullableIntFieldUpdateOperationsInput | number | null
    unit_price?: NullableFloatFieldUpdateOperationsInput | number | null
    total_price?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type seedUpdateWithoutPlantInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    temp?: NullableFloatFieldUpdateOperationsInput | number | null
    humidity?: NullableStringFieldUpdateOperationsInput | string | null
    expiration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supplier?: supplierUpdateOneRequiredWithoutSeedNestedInput
  }

  export type seedUncheckedUpdateWithoutPlantInput = {
    sid?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    temp?: NullableFloatFieldUpdateOperationsInput | number | null
    humidity?: NullableStringFieldUpdateOperationsInput | string | null
    expiration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type seedUncheckedUpdateManyWithoutPlantInput = {
    sid?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    temp?: NullableFloatFieldUpdateOperationsInput | number | null
    humidity?: NullableStringFieldUpdateOperationsInput | string | null
    expiration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type seedCreateManySupplierInput = {
    pl_name: string
    quantity?: number | null
    price?: number | null
    temp?: number | null
    humidity?: string | null
    expiration_date?: Date | string | null
  }

  export type seedUpdateWithoutSupplierInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    temp?: NullableFloatFieldUpdateOperationsInput | number | null
    humidity?: NullableStringFieldUpdateOperationsInput | string | null
    expiration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plant?: plantUpdateOneRequiredWithoutSeedNestedInput
  }

  export type seedUncheckedUpdateWithoutSupplierInput = {
    pl_name?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    temp?: NullableFloatFieldUpdateOperationsInput | number | null
    humidity?: NullableStringFieldUpdateOperationsInput | string | null
    expiration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type seedUncheckedUpdateManyWithoutSupplierInput = {
    pl_name?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    temp?: NullableFloatFieldUpdateOperationsInput | number | null
    humidity?: NullableStringFieldUpdateOperationsInput | string | null
    expiration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PlantCountOutputTypeDefaultArgs instead
     */
    export type PlantCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlantCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SupplierCountOutputTypeDefaultArgs instead
     */
    export type SupplierCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SupplierCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use customerDefaultArgs instead
     */
    export type customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = customerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use nurseplantDefaultArgs instead
     */
    export type nurseplantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = nurseplantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use plantDefaultArgs instead
     */
    export type plantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = plantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use pricingDefaultArgs instead
     */
    export type pricingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = pricingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use seedDefaultArgs instead
     */
    export type seedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = seedDefaultArgs<ExtArgs>
    /**
     * @deprecated Use supplierDefaultArgs instead
     */
    export type supplierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = supplierDefaultArgs<ExtArgs>
    /**
     * @deprecated Use adminuserDefaultArgs instead
     */
    export type adminuserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = adminuserDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}